(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{645:function(t,s,a){"use strict";a.r(s);var e=a(6),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("了解同源策略和 CORS 的历史和演变，深入了解 CORS 和各种跨域访问的类型，并学习（一些）最佳实践。")]),t._v(" "),a("h2",{attrs:{id:"译者注"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#译者注"}},[t._v("#")]),t._v(" 译者注：")]),t._v(" "),a("ul",[a("li",[t._v("本篇中使用的浏览器为 FireFox 浏览器，代码演示结果和 Chrome 浏览器等略有差别。")]),t._v(" "),a("li",[t._v("后端 nodejs 版本代码可以在"),a("a",{attrs:{href:"https://github.com/snowyYU/Deep-dive-in-CORS-BK-Code",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("查看。")])]),t._v(" "),a("h2",{attrs:{id:"浏览器控制台常见的报错信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器控制台常见的报错信息"}},[t._v("#")]),t._v(" 浏览器控制台常见的报错信息")]),t._v(" "),a("blockquote",[a("p",[t._v("No ‘Access-Control-Allow-Origin’ header is present on the requested resource.")])]),t._v(" "),a("blockquote",[a("p",[t._v("Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at "),a("a",{attrs:{href:"https://example.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://example.com/"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("Access to fetch at ‘"),a("a",{attrs:{href:"https://example.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://example.com"),a("OutboundLink")],1),t._v("’ from origin ‘http://localhost:3000’ has been blocked by CORS policy.")])]),t._v(" "),a("p",[t._v("这些报错你肯定见到过，没见过的话也没关系，下文会出现很多 CORS 相关的错误信息供你参考。")]),t._v(" "),a("p",[t._v("看到这些报错总会使人特别烦躁。不过平心而论，CORS 绝对是个特别有用的机制，可以有效的规避后端服务因配置上的问题导致的漏洞，防止恶意攻击，推动 web 标准的演化。")]),t._v(" "),a("p",[t._v("让我们从头说起吧")]),t._v(" "),a("h2",{attrs:{id:"从第一个子资源的诞生说起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从第一个子资源的诞生说起"}},[t._v("#")]),t._v(" 从第一个子资源的诞生说起")]),t._v(" "),a("p",[t._v("子资源是一个 HTML 元素，通常被嵌入到文档流中，或者在相关上下文中被执行（比如 "),a("code",[t._v("<script>")]),t._v(" 标签）。"),a("a",{attrs:{href:"http://1997.webhistory.org/www.lists/www-talk.1993q1/0182.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("1993 年"),a("OutboundLink")],1),t._v("，第一个子资源 "),a("code",[t._v("<img>")]),t._v(" 被引入进来。随着 "),a("code",[t._v("<img>")]),t._v(" 标签的引入，网站得以变得更加美观，当然，也是从这时起，网站开始变得越来越复杂。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/meet-img.png",alt:"回首 1993"}})]),t._v(" "),a("p",[t._v("你可以看到，如果浏览器需要渲染一个带有 "),a("code",[t._v("<img>")]),t._v(" 标签的页面，它会从一个地方获取相关的子"),a("strong",[t._v("资源")]),t._v("。当浏览器发起资源请求时，发起请求地址相较于目标地址，如果协议、域名、端口号三者中有一个或者一个以上不相同当话，那么这个请求就是"),a("strong",[t._v("跨域请求")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"源和跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源和跨域"}},[t._v("#")]),t._v(" 源和跨域")]),t._v(" "),a("p",[t._v("一个完整的源由三者组成：协议、合规的域名和端口，比如说，"),a("code",[t._v("http://example.com")]),t._v(" 和 "),a("code",[t._v("https://example.com")]),t._v(" 两者是不同的源 —— 第一个使用 "),a("code",[t._v("http")]),t._v(" 协议而第二个使用 "),a("code",[t._v("https")]),t._v(" 协议。 此外，"),a("code",[t._v("http")]),t._v(" 默认使用 80 端口，而"),a("code",[t._v("https")]),t._v(" 默认使用 443 端口。虽然域名都是 "),a("code",[t._v("example.com")]),t._v(" ，但它们有着不同的协议和端口，所以属于不同的源。")]),t._v(" "),a("p",[t._v("懂了吧 —— 上文提到的三个因素中只要有一个不一致，那它们的源就不是同一个。")]),t._v(" "),a("p",[t._v("我们将 "),a("code",[t._v("https://blog.example.com/posts/foo.html")]),t._v(" 和如下的 URL 做个对比，是否同源一目了然：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("URL")]),t._v(" "),a("th",[t._v("Result")]),t._v(" "),a("th",[t._v("Reason")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("https://blog.example.com/posts/bar.html")])]),t._v(" "),a("td",[t._v("同源")]),t._v(" "),a("td",[t._v("只有路径不同")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("https://blog.example.com/contact.html")])]),t._v(" "),a("td",[t._v("同源")]),t._v(" "),a("td",[t._v("只有路径不同")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("http://blog.example.com/posts/bar.html")])]),t._v(" "),a("td",[t._v("不同源")]),t._v(" "),a("td",[t._v("不同协议")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("https://blog.example.com:8080/posts/bar.html")])]),t._v(" "),a("td",[t._v("不同源")]),t._v(" "),a("td",[t._v("不同端口 ("),a("code",[t._v("https://")]),t._v(" 默认为 443 端口)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("https://example.com/posts/bar.html")])]),t._v(" "),a("td",[t._v("不同源")]),t._v(" "),a("td",[t._v("不同主机名")])])])]),t._v(" "),a("p",[t._v("举个例子来说明跨域请求，假如 "),a("code",[t._v("http://example.com/posts/bar.html")]),t._v(" 这个页面尝试去渲染来自 "),a("code",[t._v("https://example.com")]),t._v(" 这个地址的资源，那么就产生了跨域请求（注意它们的协议不同）。")]),t._v(" "),a("h3",{attrs:{id:"跨域请求的危害多多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域请求的危害多多"}},[t._v("#")]),t._v(" 跨域请求的危害多多")]),t._v(" "),a("p",[t._v("上文我们了解了什么是同源，什么是跨域，现在来看看主要存在的问题。")]),t._v(" "),a("p",[t._v("在引入了 "),a("code",[t._v("<img>")]),t._v(" 之后，新的标签更是扎堆涌现出来。比如 "),a("code",[t._v("<script>")]),t._v("、"),a("code",[t._v("<frame>")]),t._v("、"),a("code",[t._v("<video>")]),t._v("、"),a("code",[t._v("<audio>")]),t._v("、"),a("code",[t._v("<iframe>")]),t._v("、"),a("code",[t._v("<link>")]),t._v("、"),a("code",[t._v("<form>")]),t._v(" 等等。在网页的加载过程中，可以通过上述的标签获取到页面需要的资源，而这些获取资源的请求既有可能是同源的也有可能是跨域的。")]),t._v(" "),a("p",[t._v("想象一下，如果不存在 CORS，并且浏览器允许各种跨域请求。")]),t._v(" "),a("p",[t._v("假如在我 "),a("code",[t._v("evil.com")]),t._v(" 域名下的页面上有一个 "),a("code",[t._v("<script>")]),t._v(" 标签。看起来这只是个普普通通的页面，用户可以在上面获取一些有用的信息。实际上，在 "),a("code",[t._v("<script>")]),t._v(" 标签中，我写了一段向银行的 "),a("code",[t._v("DELETE /account")]),t._v(" 接口发起请求的代码。由于上文我们假设浏览器允许各种跨域请求，所以每当你访问这个页面时，都会有个 AJAX 请求悄悄地调用银行的 API。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109050834331.png",alt:"噗，你的账号完犊子了🌬"}})]),t._v(" "),a("p",[t._v("嘿嘿 —— 想象一下你正悠闲地浏览网页，突然就收到了一封来自银行的邮件，内容是恭喜你成功删除了你的账户。我知道你在想啥，如果这么简单就能把账户删掉的话，那就能对银行做"),a("strong",[t._v("任何事")]),t._v("了，咳咳，离题了。")]),t._v(" "),a("p",[t._v("为了让我的邪恶 "),a("code",[t._v("<script>")]),t._v(" 能正常工作，我还需要在请求中加入来自目标银行网站的认证信息（cookies）。这样银行的服务器就知道你是谁和要删谁的账户啦。")]),t._v(" "),a("p",[t._v("我们看看另外一个没那么邪恶的例子。")]),t._v(" "),a("p",[t._v("我想知道"),a("strong",[t._v("棒棒公司")]),t._v("的员工信息，他们公司的内网是 "),a("code",[t._v("intra.awesome-corp.com")]),t._v("。在我的网站 "),a("code",[t._v("dangerous.com")]),t._v(" 上，我放置了一个标签 "),a("code",[t._v('<img src="https://intra.awesome-corp.com/avatars/john-doe.png">')]),t._v("。")]),t._v(" "),a("p",[t._v("对于那些没有目标公司内网 "),a("code",[t._v("intra.awesome-corp.com")]),t._v(" 访问权限的人来说，上文的标签是加载不出来图片的 —— 会产生一个错误信息。相反，如果你可以连上棒棒公司内网的话，此时你打开 "),a("code",[t._v("dangerous.com")]),t._v(" 网站，那么我就知道你有棒棒公司内网的访问权限了。")]),t._v(" "),a("p",[t._v("这意味着我将能够获得有关你的一些信息。 虽然这些信息不足以让我发起一次有价值的攻击，不过你能访问棒棒公司的内网，这条消息对于攻击发起者来说就比较有价值了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109050835399.png",alt:"向第三方泄露信息 💦"}})]),t._v(" "),a("p",[t._v("以上两个例子非常简单，不过也恰恰说明了同源策略和 CORS 的必要性。当然跨域请求的危害也不止这些。有的危害我们可以避免，但也有一些危害让我们束手无策 —— 它们天然根植于网络当中。不过目前通过媒介发起的攻击已经大大减少 —— 这多亏了 CORS。")]),t._v(" "),a("p",[t._v("不过在聊起 CORS 之前，还是先说说同源策略吧。")]),t._v(" "),a("h2",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("p",[t._v("同源策略通过阻断从不同源加载的资源的读取权限来防止跨域攻击。不过这个策略还是允许一些标签加载不同源的资源，比如说 "),a("code",[t._v("<img>")]),t._v(" 标签。")]),t._v(" "),a("p",[t._v("同源策略在 1995 时被引入 Netscape Navigator 2.02，最初旨在保护对 DOM 的跨域访问。")]),t._v(" "),a("p",[t._v("尽管没有硬性要求同源策略的实现要遵循某个确切的规范，但所有的现代浏览器都用自己的方式实现了这个策略。关于同源策略的细则阐述，可以在互联网工程任务组（IETF）的 "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc6454",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC6454"),a("OutboundLink")],1),t._v(" 找到。")]),t._v(" "),a("p",[t._v("此规则集定义了同源策略的实现：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Tags")]),t._v(" "),a("th",[t._v("Cross-origin")]),t._v(" "),a("th",[t._v("Note")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("<iframe>")])]),t._v(" "),a("td",[t._v("允许嵌入")]),t._v(" "),a("td",[t._v("取决于 "),a("code",[t._v("X-Frame-Options")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<link>")])]),t._v(" "),a("td",[t._v("允许嵌入")]),t._v(" "),a("td",[t._v("可能需要正确的 "),a("code",[t._v("Content-Type")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<form>")])]),t._v(" "),a("td",[t._v("允许写入")]),t._v(" "),a("td",[t._v("经常用此标签进行跨域写入操作")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<img>")])]),t._v(" "),a("td",[t._v("允许嵌入")]),t._v(" "),a("td",[t._v("禁止通过 JavaScript 跨域读取并将其加载到 "),a("code",[t._v("<canvas>")]),t._v(" 标签中")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<audio>")]),t._v(" / "),a("code",[t._v("<video>")])]),t._v(" "),a("td",[t._v("允许嵌入")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<script>")])]),t._v(" "),a("td",[t._v("允许嵌入")]),t._v(" "),a("td",[t._v("可能会被禁止访问特定的 API")])])])]),t._v(" "),a("p",[t._v("同源策略解决了很多问题，但是也带来了诸多的限制。特别是在单页应用和富媒体网站中，它的众多规则反而限制了网站的发展。")]),t._v(" "),a("p",[t._v("在这种背景下，CORS 诞生了，其目标就是在同源策略的框架内为跨域访问提供更加灵活的方式。")]),t._v(" "),a("h2",{attrs:{id:"走进-cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#走进-cors"}},[t._v("#")]),t._v(" 走进 CORS")]),t._v(" "),a("p",[t._v("目前我们已经搞清楚了什么是源、它是怎么定义的、跨域请求的缺点以及浏览器实现的同源策略。")]),t._v(" "),a("p",[t._v("现在是时候让我们熟悉跨源资源共享（CORS）了。CORS 是一种机制，允许通过网络控制对网页上子资源的访问。该机制将子资源的访问分为三种：")]),t._v(" "),a("ol",[a("li",[t._v("跨域写操作")]),t._v(" "),a("li",[t._v("跨域资源嵌入")]),t._v(" "),a("li",[t._v("跨域读操作")])]),t._v(" "),a("p",[t._v("在我们详细介绍这三者之前，需要明白，尽管浏览器（默认情况下）可能允许某种类型的跨域请求，但是这"),a("strong",[t._v("并不意味着该请求会被服务器接收")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("跨域写入")]),t._v("包括链接、重定向和表单提交。在浏览器启用 CORS 的情况下，所有的这些操作都"),a("strong",[t._v("被允许")]),t._v("。有些情况下会产生一个叫做"),a("strong",[t._v("预检请求")]),t._v("的东西，这时可能会影响到跨域写操作，我们在下文会详细地说明这种情况。")]),t._v(" "),a("p",[a("strong",[t._v("跨域嵌入")]),t._v("是指通过 "),a("code",[t._v("<script>")]),t._v("、"),a("code",[t._v("<link>")]),t._v("、"),a("code",[t._v("<img>")]),t._v("、"),a("code",[t._v("<video>")]),t._v("、"),a("code",[t._v("<audio>")]),t._v("、"),a("code",[t._v("<object>")]),t._v("、"),a("code",[t._v("<embed>")]),t._v("、"),a("code",[t._v("<iframe>")]),t._v(" 等标签加载的子资源。默认情况下它们均被"),a("strong",[t._v("允许")]),t._v("跨域嵌入。不过 "),a("code",[t._v("<iframe>")]),t._v(" 有点特别 —— 因为它的目的是在框架内加载不同的页面，可以使用 "),a("code",[t._v("X-Frame-options")]),t._v(" 响应头控制其是否可以跨域加载。")]),t._v(" "),a("p",[t._v("像 "),a("code",[t._v("<img>")]),t._v(" 这种可以嵌入网站的子资源 —— 它们诞生的原因之一就是为了获取不同源的资源。这就是为什么在 CORS 中区分跨域嵌入和跨域读取，并且相应的处理方式也不同。")]),t._v(" "),a("p",[a("strong",[t._v("跨域读取")]),t._v(" 是由 AJAX / "),a("code",[t._v("fetch")]),t._v(" 获取子资源所产生的。 默认情况下，浏览器会"),a("strong",[t._v("限制")]),t._v("此类请求。当然，有一种通过嵌入子资源的方法也能实现跨域读取，不过相应地，如今的浏览器也存在着另一个策略来应对这种方法。")]),t._v(" "),a("p",[t._v("如果你的浏览器已更新至最新版本，那么它应该已经实现以上的策略了。")]),t._v(" "),a("h3",{attrs:{id:"跨域写操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域写操作"}},[t._v("#")]),t._v(" 跨域写操作")]),t._v(" "),a("p",[t._v("执行跨域写入操作有时不会成功，让我们看一个例子，看看 CORS 的具体作用。")]),t._v(" "),a("p",[t._v("首先，我们看下使用 "),a("a",{attrs:{href:"https://crystal-lang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Crystal"),a("OutboundLink")],1),t._v(" (框架使用 "),a("a",{attrs:{href:"https://kemalcr.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kemal"),a("OutboundLink")],1),t._v(") 语言实现的一个 HTTP 服务：")]),t._v(" "),a("div",{staticClass:"language-crystal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-crystal"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"kemal"')])]),t._v("\n\nport "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PORT"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4000")]),t._v("\n\nget "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nget "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hey!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\npost "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nKemal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" port\nKemal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run\n")])])]),a("p",[t._v("在 "),a("code",[t._v("/greet")]),t._v(" 路径中接收一个请求，首先获取了请求体中的 "),a("code",[t._v("name")]),t._v(" 属性值，之后返回了 "),a("code",[t._v("Hello #{name}!")]),t._v("。我们使用如下的命令来启动这个小服务：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ crystal run server.cr\n")])])]),a("p",[t._v("服务启动并开始监听 "),a("code",[t._v("localhost:4000")]),t._v("。通过浏览器访问 "),a("code",[t._v("localhost:4000")]),t._v("，将会看到 “Hello World”：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109050835757.png",alt:"Hello, world! 🌍"}})]),t._v(" "),a("p",[t._v("好啦，我们的服务已经成功运行了，现在从浏览器的控制台向 "),a("code",[t._v("localhost:4000")]),t._v(" 发起一个 "),a("code",[t._v("POST /greet")]),t._v(" 请求吧。我们使用 "),a("code",[t._v("fetch")]),t._v(" 方法发起请求：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:4000/greet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("headers")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"Content-Type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application/json"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ilija"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" resp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("执行此段代码后，我们收到了来自服务的问候：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109050835204.png",alt:"Hi there! 👋"}})]),t._v(" "),a("p",[t._v("这是一个没有跨域的 "),a("code",[t._v("POST")]),t._v(" 请求，是从 "),a("code",[t._v("http://localhost:4000")]),t._v("（和请求目标地址同源）页面发起的同源请求。")]),t._v(" "),a("p",[t._v("我们尝试向此地址发送一个跨域请求。我们打开 "),a("code",[t._v("https://google.com")]),t._v("，然后从此标签页发起一个和上文相同的请求：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post.png",alt:"Hello, CORS! 💣"}})]),t._v(" "),a("p",[t._v("通过此方法，我们看到了著名的 CORS 错误。尽管 Crystal 服务可以响应这个请求，我们的浏览器还是拦截了请求。从报错信息我们可以了解到，请求在尝试进行跨域写入操作。")]),t._v(" "),a("p",[t._v("第一个例子中，我们从 "),a("code",[t._v("http://localhost:4000")]),t._v(" 页面向 "),a("code",[t._v("http://localhost:4000/greet")]),t._v(" 发起请求，因为页面地址和目标地址同源，所以浏览器没有拦截此请求。相反在第二个例子中，从网站（"),a("code",[t._v("https://google.com")]),t._v("）发起的请求试图向 "),a("code",[t._v("http://localhost:4000")]),t._v(" 执行写入操作，然后浏览器对请求做了标记，并且拦截了它。")]),t._v(" "),a("h3",{attrs:{id:"预检请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预检请求"}},[t._v("#")]),t._v(" 预检请求")]),t._v(" "),a("p",[t._v("查看开发者控制台中 Network 标签页里的内容，我们会看到上述代码发起了两次请求：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-network.png",alt:"在 “Network” 面板中看到两个出站请求"}})]),t._v(" "),a("p",[t._v("有趣的是第一个请求的方法是 "),a("code",[t._v("OPTIONS")]),t._v("，而第二个请求的方法是 "),a("code",[t._v("POST")]),t._v("。")]),t._v(" "),a("p",[t._v("仔细观察下 "),a("code",[t._v("OPTIONS")]),t._v(" 请求，会发现浏览器先发送了"),a("code",[t._v("OPTIONS")]),t._v(" 请求，再发送了 "),a("code",[t._v("POST")]),t._v(" 请求：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-network-options.png",alt:"细究下 OPTIONS 请求 🔍"}})]),t._v(" "),a("p",[t._v("有意思的是，即使 "),a("code",[t._v("OPTIONS")]),t._v(" 请求的响应已经是 HTTP 200，在请求列表中它还是被标记为红色了，这是为什么呢？")]),t._v(" "),a("p",[t._v("这是现代浏览器发起的"),a("strong",[t._v("预检请求")]),t._v("。如果 CORS 认为一个请求是复杂请求，那么浏览器会先发起预检请求。判定一个请求为 "),a("strong",[t._v("复杂")]),t._v(" 请求的标准如下：")]),t._v(" "),a("ul",[a("li",[t._v("请求使用的方法不是 "),a("code",[t._v("GET")]),t._v("、"),a("code",[t._v("POST")]),t._v(" 或者 "),a("code",[t._v("HEAD")])]),t._v(" "),a("li",[t._v("请求头包含了 "),a("code",[t._v("Accept")]),t._v("、"),a("code",[t._v("Accept-Language")]),t._v(" 和 "),a("code",[t._v("Content-Language")]),t._v(" 以外的字段")]),t._v(" "),a("li",[t._v("请求头包含了 "),a("code",[t._v("Content-Type")]),t._v(" 字段，且它的值不在 "),a("code",[t._v("application/x-www-form-urlencoded")]),t._v("、"),a("code",[t._v("multipart/form-data")]),t._v(" 和 "),a("code",[t._v("text/plain")]),t._v(" 三者中")])]),t._v(" "),a("p",[t._v("因此在上文的例子中，即使我们发起的是 "),a("code",[t._v("POST")]),t._v(" 请求，但是由于请求头中的 "),a("code",[t._v("Content-Type: application/json")]),t._v("，浏览器最后还是判定我们的请求为复杂请求。")]),t._v(" "),a("p",[t._v("如果我们修改下我们的请求和服务，使之可以发送并处理 "),a("code",[t._v("text/plain")]),t._v(" 类型的内容（代替 JSON），那么浏览器就不会发起预检请求了：")]),t._v(" "),a("div",{staticClass:"language-crystal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-crystal"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"kemal"')])]),t._v("\n\nget "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nget "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hey!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\npost "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body\n\n  name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"there"')])]),t._v("\n  name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nil"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nKemal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4000")]),t._v("\nKemal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run\n")])])]),a("p",[t._v("现在我们可以发起请求头带有 "),a("code",[t._v("Content-type: text/plain")]),t._v(" 的请求了:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:4000/greet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("headers")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"Content-Type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/plain"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ilija"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" resp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("看吧，这次就没有预检请求了，不过浏览器的 CORS 策略仍在拦截响应：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-text-plain.png",alt:"CORS 依然坚挺"}})]),t._v(" "),a("p",[t._v("不过也正因为我们这次发起的不是"),a("strong",[t._v("复杂")]),t._v("请求，所以我们的浏览器 "),a("strong",[t._v("也并没有拦截请求")]),t._v(":")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-text-plain-response-blocked.png",alt:"请求发起成功 ➡️"}})]),t._v(" "),a("p",[t._v("简而言之：针对 "),a("code",[t._v("text/plain")]),t._v(" 这种跨域请求，由于我们的服务"),a("strong",[t._v("缺少响应的配置")]),t._v("，导致无法处理此请求，也没有做异常的统一处理，这部分和浏览器也没什么关系。不过浏览器尽力做到了如下的措施 —— 它不会将响应直接暴露在页面和请求列表中。因此，在此例中，CORS 没有拦截请求 —— "),a("strong",[t._v("它拦截了响应")]),t._v("。")]),t._v(" "),a("p",[t._v("浏览器中的 CORS 策略认为此请求是一个跨域读取请求，即使请求的方法为 "),a("code",[t._v("POST")]),t._v("，请求头中 "),a("code",[t._v("Content-type")]),t._v(" 的属性值却说明了它本质上和 "),a("code",[t._v("GET")]),t._v(" 请求无异。跨域读取请求默认会被拦截，因此在请求列表中我们看到了被拦截的响应。")]),t._v(" "),a("p",[t._v("消除预检请求以应对 CORS 策略可并不是一个好办法，实际上，如果你希望服务器可以妥善处理预检请求，那就应该针对 "),a("code",[t._v("OPTIONS")]),t._v(" 方式的请求返回带有正确响应头的响应。")]),t._v(" "),a("p",[t._v("在处理 "),a("code",[t._v("OPTIONS")]),t._v(" 请求时，你需要知道浏览器会特别关注三个出现在预检请求响应头的属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Access-Control-Allow-Methods")]),t._v(" —— 这个属性标识了在 CORS 策略下，响应的 URL 支持哪些请求方法。")]),t._v(" "),a("li",[a("code",[t._v("Access-Control-Allow-Headers")]),t._v(" —— 这个属性标识了在 CORS 策略下，响应的 URL 支持哪些请求头。")]),t._v(" "),a("li",[a("code",[t._v("Access-Control-Max-Age")]),t._v(" —— 它表示可以缓存 "),a("code",[t._v("Access-Control-Allow-Methods")]),t._v(" 和 "),a("code",[t._v("Access-Control-Allow-Headers")]),t._v(" 头部中提供的信息的秒数（默认为 5）。")])]),t._v(" "),a("p",[t._v("现在看一下上文举例的复杂请求：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:4000/greet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("headers")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"Content-Type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application/json"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ilija"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" resp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("从上文我们已经知道，当发起这个请求时，我们的浏览器会先根据预检请求的响应来检查服务器是否可以处理跨域请求。为了能正确地响应这个跨域请求，我们首先要将 "),a("code",[t._v("OPTIONS /greet")]),t._v(" 端点加入我们的服务中。在这服务的响应头中, 新加入的端点会告知浏览器：来自源 "),a("code",[t._v("https://www.google.com")]),t._v(" 并且带有 "),a("code",[t._v("Content-type: application/json")]),t._v(" 头部的 "),a("code",[t._v("POST /greet")]),t._v(" 请求可以被接收。")]),t._v(" "),a("p",[t._v("为了达到目标，我们使用 "),a("code",[t._v("Access-Control-Allow-*")]),t._v(" 这种响应头部：")]),t._v(" "),a("div",{staticClass:"language-crystal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-crystal"}},[a("code",[t._v("options "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Allow `POST /greet`...")]),t._v("\n  env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Methods"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...with `Content-type` header in the request...")]),t._v("\n  env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Headers"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-type"')])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...from https://www.google.com origin.")]),t._v("\n  env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.google.com"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("p",[t._v("重启服务，再次发起请求：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-blocked.png",alt:"还是被拦截了？ 🤔"}})]),t._v(" "),a("p",[t._v("我们的请求仍然被拦截了。即使我们的 "),a("code",[t._v("OPTIONS /greet")]),t._v(" 端点确实对请求做了合适的处理，但我们还是看到了报错信息。不过开发者工具中的网络标签向我们展示了一些有趣的信息：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-blocked-network-inspect.png",alt:"OPTIONS 那行请求变成绿色了！ 🎉"}})]),t._v(" "),a("p",[t._v("向 "),a("code",[t._v("OPTIONS /greet")]),t._v(" 端点发起的请求成功了！但是 "),a("code",[t._v("POST /greet")]),t._v(" 调用仍然失败。如果我们看一下 "),a("code",[t._v("POST /greet")]),t._v(" 请求的内部结构，我们将看到一个熟悉的信息：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-blocked-post-inspect.png",alt:"POST 也是成功的？ 😲"}})]),t._v(" "),a("p",[t._v("实际上，请求成功了 —— 服务返回了 HTTP 200。预检请求确实起效了 —— 浏览器顺利发起了 "),a("code",[t._v("POST")]),t._v(" 请求。但是针对 "),a("code",[t._v("POST")]),t._v(" 请求的响应中没有包含有关 CORS 的头部信息，所以即使浏览器发起了请求，但响应也被它自己拦截了。")]),t._v(" "),a("p",[t._v("为了使浏览器正确处理来自 "),a("code",[t._v("POST /greet")]),t._v(" 请求的响应，我们也需要为 "),a("code",[t._v("POST")]),t._v(" 端点加一个 CORS 头部：")]),t._v(" "),a("div",{staticClass:"language-crystal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-crystal"}},[a("code",[t._v("post "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.google.com"')])]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("p",[t._v("我们给响应头加了 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 属性后，会告知浏览器打开 "),a("code",[t._v("https://www.google.com")]),t._v(" 的标签页可以访问响应内容。")]),t._v(" "),a("p",[t._v("再尝试一下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-success.png",alt:"POST 成功啦！"}})]),t._v(" "),a("p",[t._v("我们看到 "),a("code",[t._v("POST /greet")]),t._v(" 返回了正确的响应内容，同时没有任何报错。再瞄一眼 Network 标签，会发现两个请求都是绿色的了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-success-network.png",alt:"OPTIONS & POST 成功！ 💪"}})]),t._v(" "),a("p",[t._v("通过在预检端点 "),a("code",[t._v("OPTIONS /greet")]),t._v(" 使用正确的响应头，使跨域请求可以访问我们服务中的 "),a("code",[t._v("POST /greet")]),t._v(" 端点。最重要的是，在为 "),a("code",[t._v("POST /greet")]),t._v(" 端点添加正确的 CORS 响应头信息后，浏览器终于可以不再拦截跨域响应了。")]),t._v(" "),a("h3",{attrs:{id:"跨域读取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域读取"}},[t._v("#")]),t._v(" 跨域读取")]),t._v(" "),a("p",[t._v("正如我们上文提到的那样，默认情况下跨域读取会被拦截。这是故意的 —— 我们不会想在当前页面上加载其他源上的资源。")]),t._v(" "),a("p",[t._v("假如我们在 Crystal 服务中加入对 "),a("code",[t._v("GET /greet")]),t._v(" 请求的操作：")]),t._v(" "),a("div",{staticClass:"language-crystal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-crystal"}},[a("code",[t._v("get "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hey!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("p",[t._v("我们从 "),a("code",[t._v("www.google.com")]),t._v(" 页面试着请求 "),a("code",[t._v("GET /greet")]),t._v(" 端点，会发现遭到了 CORS 拦截：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-get.png",alt:"CORS 拦截 🙅"}})]),t._v(" "),a("p",[t._v("仔细查看下请求内容，我们会发现一些有趣的东西：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-get-blocked-inspect.png",alt:" GET 请求成功 🎉"}})]),t._v(" "),a("p",[t._v("如之前一样，浏览器确实让请求顺利发起了 —— 收到了 HTTP 200 的响应。不过浏览器没有将那个请求的响应显示在页面/控制台中。同样的，这个例子中 CORS 没有拦截请求 —— "),a("strong",[t._v("它拦截的是响应")]),t._v("。")]),t._v(" "),a("p",[t._v("就像跨域写入操作一样，我们可以设置 CORS 并使其可用于跨域读取 —— 通过添加带有 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 的头部信息：")]),t._v(" "),a("div",{staticClass:"language-crystal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-crystal"}},[a("code",[t._v("get "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.google.com"')])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hey!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("p",[t._v("浏览器获取到来自服务器的响应时，它会去检查响应头的 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 属性值，用以决定是否让页面读取响应内容。现在我们将值设为 "),a("code",[t._v("https://www.google.com")]),t._v(" 后，就可以正确地加载响应了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-get-success.png",alt:"成功发起 GET 跨域请求 🎉"}})]),t._v(" "),a("p",[t._v("这样浏览器既可以防止跨域读取造成的危害，又给予后端服务一定的操作空间，使之可以响应特定的跨域请求。")]),t._v(" "),a("h2",{attrs:{id:"配置-cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-cors"}},[t._v("#")]),t._v(" 配置 CORS")]),t._v(" "),a("p",[t._v("如上文例子中做的那样，为了迎合浏览器中的 CORS 策略，我们针对 "),a("code",[t._v("/greet")]),t._v(" 请求的处理设置了响应头中 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 属性值为 "),a("code",[t._v("https://www.google.com")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-crystal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-crystal"}},[a("code",[t._v("post "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/greet"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body\n\n  name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"there"')])]),t._v("\n  name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nil"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n\n  env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.google.com"')])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-literal"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token delimiter punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('!"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("p",[t._v("这将允许 "),a("code",[t._v("https://www.google.com")]),t._v(" 源调用我们的服务，并且浏览器没报任何错误。设置好 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 的值后，我们可以尝试再次执行 "),a("code",[t._v("fetch")]),t._v(" 操作：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ieftimov.com/back-to-the-origin-with-cors/google-cross-origin-post-text-plain-success.png",alt:"成功！ 🎉"}})]),t._v(" "),a("p",[t._v("成功了！现在可以从 "),a("code",[t._v("https://www.google.com")]),t._v(" 向 "),a("code",[t._v("/greet")]),t._v(" 发起跨域请求了。或者，我们可以设置头部中相应的属性值为 "),a("code",[t._v("*")]),t._v("，这样浏览器会允许任何源向我们的服务发起正确的跨域请求。\n配置成此值需要三思而后行，不过"),a("strong",[t._v("大多数情况下")]),t._v("是安全的。这里有一条总结出来的建议可供你参考：如果跨域请求从浏览器无痕模式下的标签发出，并且其获取到的数据也正是你想展示的，那么你就可以设置一个宽松的值（"),a("code",[t._v("*")]),t._v("）来应对 CORS 策略。")]),t._v(" "),a("p",[t._v("另一种配置 CORS 使之放宽对请求限制的方法是使用带有 "),a("code",[t._v("Access-Control-Allow-Credentials")]),t._v(" 属性的响应头。当请求的 credetials 模式为 "),a("code",[t._v("include")]),t._v(" 时，浏览器会根据响应头中 "),a("code",[t._v("Access-Control-Allow-Credentials")]),t._v(" 的值来决定是否将响应暴露给前端 JavaScript 代码。")]),t._v(" "),a("p",[t._v("请求中的 credetials 模式出自 "),a("a",{attrs:{href:"https://fetch.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fetch API"),a("OutboundLink")],1),t._v(" 文档，其起源可追溯到原始 XMLHttpRequest 对象：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("从 "),a("code",[t._v("fetch")]),t._v(" 方法的文档中我们了解到， XML 中的 "),a("code",[t._v("withCredentials")]),t._v(" 属性在 "),a("code",[t._v("fetch")]),t._v(" 方法的调用中是作为一个可选的参数使用的：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("credentials")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"include"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("可选的 "),a("code",[t._v("credentials")]),t._v(" 属性值为 "),a("code",[t._v("omit")]),t._v("、"),a("code",[t._v("same-origin")]),t._v(" 和 "),a("code",[t._v("include")]),t._v("。后端服务可以根据请求中不同的 "),a("code",[t._v("credentials")]),t._v(" 属性值，决定浏览器怎样显示响应（通过 "),a("code",[t._v("Access-Control-Allow-Credentials")]),t._v(" 响应头）。")]),t._v(" "),a("p",[t._v("Fetch API 说明文档将 CORS 和 "),a("code",[t._v("fetch")]),t._v(" API 的交互以及浏览器所采用的安全性机制做了详细的"),a("a",{attrs:{href:"https://fetch.spec.whatwg.org/#cors-protocol-and-credentials",target:"_blank",rel:"noopener noreferrer"}},[t._v("划分与说明"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"一些最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些最佳实践"}},[t._v("#")]),t._v(" 一些最佳实践")]),t._v(" "),a("p",[t._v("在总结之前，让我们介绍一下跨源资源共享（CORS）的一些最佳实践。")]),t._v(" "),a("h3",{attrs:{id:"面向海量用户"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向海量用户"}},[t._v("#")]),t._v(" 面向海量用户")]),t._v(" "),a("p",[t._v("一个常见的例子是，如果你拥有一个网站，该网站显示的内容是公开的，它不需要用户付费、验证身份或授权后才能查看 —— 这种情况下你可以针对获取这些内容的请求设置响应头 "),a("code",[t._v("Access-Control-Allow-Origin: *")]),t._v("。")]),t._v(" "),a("p",[t._v("在下列场景中将值设为 "),a("code",[t._v("*")]),t._v(" 会比较好：")]),t._v(" "),a("ul",[a("li",[t._v("大量用户可以不受限制地访问此资源")]),t._v(" "),a("li",[t._v("此资源需要不受限制地被大量用户访问")]),t._v(" "),a("li",[t._v("访问资源的源和客户端种类繁多，无法设置特定的值，或者你根本不在乎跨域请求造成的问题")])]),t._v(" "),a("p",[t._v("如果将此设置应用于响应私有网络（比如受防火墙保护，或者需要挂载 VPN 才可以访问）上资源的请求，会有一定的风险。当你通过 VPN 连上公司的内网后，有了内网文件的访问权限：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109050835828.png",alt:"简化 VPNs 连接的示例"}})]),t._v(" "),a("p",[t._v("现在，假设攻击者的网站 "),a("code",[t._v("dangerous.com")]),t._v(" 上有一个连接到内网文件的链接，则他们（理论上）可以在其网站上创建有该文件访问权限的脚本：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109050835900.png",alt:"文件泄漏"}})]),t._v(" "),a("p",[t._v("虽然发起这样的攻击很难，并且需要大量有关 VPN 及其中存储的文件的知识，但我们必须要意识到设置为 "),a("code",[t._v("Access-Control-Allow-Origin: *")]),t._v(" 是有潜在风险的。")]),t._v(" "),a("h3",{attrs:{id:"面向内部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向内部"}},[t._v("#")]),t._v(" 面向内部")]),t._v(" "),a("p",[t._v("继续上文的例子，假设我们需要对自己的网站进行统计分析，我们可能需要借助用户浏览器发送的相关数据去采集用户的体验和行为。")]),t._v(" "),a("p",[t._v("常见的方法是定期使用 JavaScript 从用户的浏览器发起异步请求。后端有个 API 用来接收这些请求，然后进行数据上的存储和处理。")]),t._v(" "),a("p",[t._v("此例中，我们的后端 API 是公共的，不过我们可不希望 "),a("strong",[t._v("任何")]),t._v(" 网站都可以向我们的数据采集 API 发送数据。实际上，我们只对来自我们自己网站上的请求感兴趣 —— 就是这样。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109050835584.png",alt:""}})]),t._v(" "),a("p",[t._v("此例中，我们将 API 的响应头属性 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 值设置为我们网站的 URL。这样的话来自别的源的请求会被浏览器拦截。")]),t._v(" "),a("p",[t._v("即使用户或别的网站拼命地塞数据到我们的统计接口，在 API 资源响应头部设置的 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 属性也不会让请求通过：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109050835824.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"请求头中-origin-属性值为-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求头中-origin-属性值为-null"}},[t._v("#")]),t._v(" 请求头中 Origin 属性值为 NUll")]),t._v(" "),a("p",[t._v("另一个有趣的例子是 "),a("code",[t._v("null")]),t._v(" 源。当使用浏览器直接打开一个带有资源请求的本地文件时，就会出现这种情况。比如，来自本地计算机上静态文件中运行的某些 JavaScript 的请求会将请求头中的 "),a("code",[t._v("Origin")]),t._v(" 属性设置为 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("p",[t._v("在这种情况下，如果我们的服务不允许 origin 值为 "),a("code",[t._v("null")]),t._v(" 的请求访问我们的资源，那么此举可能会影响到开发人员的效率。在你的网站/产品是面向开发人员的情况下，可以通过设置 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 来允许这种类型的跨域请求访问资源。")]),t._v(" "),a("h3",{attrs:{id:"尽量避免使用-cookies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尽量避免使用-cookies"}},[t._v("#")]),t._v(" 尽量避免使用 cookies")]),t._v(" "),a("p",[t._v("上文中我们聊到了在使用 "),a("code",[t._v("Access-Control-Allow-Credentials")]),t._v(" 字段的时候，默认情况下是不允许请求中带上 cookies 的，只需要设置响应头 "),a("code",[t._v("Access-Control-Allow-Credentials: true")]),t._v(" 就可以允许跨域请求发送 cookie 了。这会告知浏览器后端服务允许跨域请求携带认证信息（比如 cookies）。")]),t._v(" "),a("p",[t._v("允许并接受跨域 Cookie 可能会有一定的风险。此举会将自身暴露给潜在的攻击媒介，所以应该在"),a("strong",[t._v("非常必须")]),t._v("的时候才开启它。")]),t._v(" "),a("p",[t._v("当你确切知道哪些客户端将访问你的服务器时，此时跨域 Cookie 才能发挥其自身的价值。这正是当允许跨域请求携带认证信息时，CORS 规则不允许我们设置 "),a("code",[t._v("Access-Control-Allow-Origin: *")]),t._v(" 的原因")]),t._v(" "),a("p",[t._v("单纯从技术上来说，"),a("code",[t._v("Access-Control-Allow-Origin: *")]),t._v(" 和 "),a("code",[t._v("Access-Control-Allow-Credentials: true")]),t._v(" 是可以组合起来使用的，不过此种情况是一个"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("反面模式"),a("OutboundLink")],1),t._v("，应该避免这样使用。")]),t._v(" "),a("p",[t._v("如果你希望服务可以被不同的客户端和源访问，则应该考虑开发一个 API 生成认证信息（使用基于 token 的身份验证）而不是使用 Cookie。但是，如果无法采用 API 方式解决问题，那么请确保你针对跨站请求伪造（CSRF）进行了防御。")]),t._v(" "),a("h2",{attrs:{id:"附加阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附加阅读"}},[t._v("#")]),t._v(" 附加阅读")]),t._v(" "),a("p",[t._v("希望这篇（长）文章可以让你对 CORS 有清晰的认知，包括其原理还有其存在的意义。下面有一部分是本文的参考链接，还有一些是我个人觉得很棒的关于 CORS 的文章：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cross-Origin Resource Sharing (CORS)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Access-Control-Allow-Credentials")]),t._v(" header"),a("OutboundLink")],1),t._v(" on MDN Web Docs")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.moesif.com/blog/technical/cors/Authoritative-Guide-to-CORS-Cross-Origin-Resource-Sharing-for-REST-APIs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Authoritative guide to CORS (Cross-Origin Resource Sharing) for REST APIs"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("The "),a("a",{attrs:{href:"https://fetch.spec.whatwg.org/#http-cors-protocol",target:"_blank",rel:"noopener noreferrer"}},[t._v("“CORS protocol” section"),a("OutboundLink")],1),t._v(" of the "),a("a",{attrs:{href:"https://fetch.spec.whatwg.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fetch API spec"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Same-origin policy"),a("OutboundLink")],1),t._v(" on MDN Web Docs")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://stackoverflow.com/users/19068/quentin",target:"_blank",rel:"noopener noreferrer"}},[t._v("Quentin’s"),a("OutboundLink")],1),t._v(" great "),a("a",{attrs:{href:"https://stackoverflow.com/a/35553666",target:"_blank",rel:"noopener noreferrer"}},[t._v("summary of CORS"),a("OutboundLink")],1),t._v(" on StackOverflow")])]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("原文地址："),a("a",{attrs:{href:"https://ieftimov.com/post/deep-dive-cors-history-how-it-works-best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Deep dive in CORS: History, how it works, and best practices"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("原文作者："),a("a",{attrs:{href:"https://ieftimov.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ilija Eftimov"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("译文出自："),a("a",{attrs:{href:"https://github.com/xitu/gold-miner",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金翻译计划"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("本文永久链接："),a("a",{attrs:{href:"https://github.com/xitu/gold-miner/blob/master/article/2021/deep-dive-cors-history-how-it-works-best-practices.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/xitu/gold-miner/blob/master/article/2021/deep-dive-cors-history-how-it-works-best-practices.md"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("译者："),a("a",{attrs:{href:"https://github.com/snowyYU",target:"_blank",rel:"noopener noreferrer"}},[t._v("snowyYU"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("校对者："),a("a",{attrs:{href:"https://github.com/Kimhooo",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kimhooo"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/Chorer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Chorer"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);