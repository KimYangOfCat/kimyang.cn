(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{671:function(t,e,a){"use strict";a.r(e);var s=a(6),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109072225030.jpeg",alt:""}})]),t._v(" "),a("p",[t._v("正则表达式（RegEx）被广泛地运用于 Web 开发中，用作模式匹配及验证等用途。然而，在实际使用中它们会带来一些安全和性能上的风险，并向攻击者敞开大门。")]),t._v(" "),a("p",[t._v("因此，在这篇文章中，我将讨论使用正则表达式前所需注意的两个基本问题。")]),t._v(" "),a("h2",{attrs:{id:"灾难性回溯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#灾难性回溯"}},[t._v("#")]),t._v(" 灾难性回溯")]),t._v(" "),a("p",[t._v("正则表达式的算法有两种：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("确定性有限状态自动机（DFA）")]),t._v(" —— 对于给定字符串，每个字符只检查一次。")]),t._v(" "),a("li",[a("strong",[t._v("非确定性有限状态自动机（NFA）")]),t._v(" —— 多次检查同一个字符，直到找到最佳匹配。")])]),t._v(" "),a("p",[t._v("JavaScript 的 RegEx 引擎使用的是 NFA 算法，这会导致灾难性回溯。")]),t._v(" "),a("p",[t._v("为了更好地理解这个问题，让我们考虑以下的 RegEx：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(g|i+)+t")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这个 RegEx 看起来很简单。但是，请别低估它让你付出的代价 😯。首先，让我们了解这个 RegEx 背后的含义：")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("(g|i+)")])]),t._v(" —— 这个组检查给定字符串是否由 "),a("code",[t._v("g")]),t._v(" 或至少一个 "),a("code",[t._v("i")]),t._v(" 开头。")]),t._v(" "),a("li",[t._v("接下来的 "),a("code",[t._v("+")]),t._v(" 将匹配前面的组一次或多次。")]),t._v(" "),a("li",[t._v("字符串应由字母 "),a("code",[t._v("t")]),t._v(" 结尾。")])]),t._v(" "),a("p",[t._v("根据上方的 RegEx，以下的文本被判定为匹配：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git\ngiit\ngggt\ngigiggt\nigggt\n")])])]),a("p",[t._v("现在，让我们以一个匹配的字符串作为输入，测试上方的 RegEx。我将使用 "),a("code",[t._v("console.time()")]),t._v(" 方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109072225143.png",alt:"匹配的文本"}})]),t._v(" "),a("p",[t._v("我们可以看到执行速度非常快，即使字符串有点长。")]),t._v(" "),a("blockquote",[a("p",[t._v("但是，当你看到验证不匹配的文本所花费的时间时，你会感到惊讶。")])]),t._v(" "),a("p",[t._v("在下方的示例中，字符串以 "),a("code",[t._v("v")]),t._v(" 结尾，因此与 RegEx 不匹配。然而，它花了大约 429 毫秒，差不多是验证匹配字符串的运行时间的 400 倍。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109072225912.png",alt:"不匹配的文本"}})]),t._v(" "),a("blockquote",[a("p",[t._v("这个性能上的差异来源于 JavaScript 所使用的 NFA 算法。")])]),t._v(" "),a("p",[t._v("在第一次验证成功后，JavaScript 的 RegEx 引擎仍会尝试继续。当它在特定位置失败时，它将回溯到上一个位置并寻找替代路径。")]),t._v(" "),a("p",[t._v("当回溯变得太复杂时，算法就会消耗更多计算能力，造成"),a("strong",[t._v("灾难性回溯")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("备注")]),t._v("：欲了解回溯的复杂度，你可以访问 "),a("a",{attrs:{href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("regex101.com"),a("OutboundLink")],1),t._v(" 并测试你的 RegEx。"),a("a",{attrs:{href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("regex101.com"),a("OutboundLink")],1),t._v(" 显示使用上述 RegEx 验证 "),a("code",[t._v("giiiit")]),t._v(" 只需要 10 个步骤，而验证 "),a("code",[t._v("giiiiv")]),t._v(" 则需要 189 个步骤。")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"node-js-环境上的-redos-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-环境上的-redos-攻击"}},[t._v("#")]),t._v(" Node.js 环境上的 ReDoS 攻击")]),t._v(" "),a("blockquote",[a("p",[t._v("攻击者能利用灾难性回溯来攻击 Node.js 服务器。")])]),t._v(" "),a("p",[t._v("由于 JavaScript 是单线程的，ReDoS 攻击能耗尽事件循环，造成服务器无响应，直到请求完成为止。")]),t._v(" "),a("p",[t._v("我将使用 Moment.js 库来演示这一点，因为在低于 2.15.2 的 Moment.js 的版本中存在一个著名的 ReDoS 漏洞。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" moment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"moment"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmoment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("locale")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"be"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("moment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"D                               MMN MMMM"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在这个示例中，日期格式有 40 个字符，其中包括 31 个附加空格。由于灾难性回溯，这些空格将使运行时间增加一倍。在我的本地环境中，它耗时超过 4 分钟。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://picbed.kimyang.cn/202109072225054.png",alt:"运行结果"}})]),t._v(" "),a("p",[a("code",[t._v("/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/")]),t._v(" 中 "),a("code",[t._v("+")]),t._v(" 运算符的过度使用造成了这个漏洞。幸运的是，该问题由 "),a("a",{attrs:{href:"https://snyk.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Snyk"),a("OutboundLink")],1),t._v("（一个漏洞追踪工具）提出后便在更高的版本中得到了修复。")]),t._v(" "),a("h2",{attrs:{id:"如何规避-regex-的漏洞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何规避-regex-的漏洞"}},[t._v("#")]),t._v(" 如何规避 RegEx 的漏洞")]),t._v(" "),a("h3",{attrs:{id:"_1-编写简单的-regex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-编写简单的-regex"}},[t._v("#")]),t._v(" 1. 编写简单的 RegEx")]),t._v(" "),a("p",[t._v("当 RegEx 中包含至少 3 个字符，且包含至少两个彼此接近的 "),a("code",[t._v("*")]),t._v("、"),a("code",[t._v("+")]),t._v(" 和 "),a("code",[t._v("}")]),t._v(" 时，灾难性回溯就会发生。")]),t._v(" "),a("p",[t._v("所以，如果你能简化你的 RegEx 并避免使用以上的样式，那么你便能避免灾难性回溯。")]),t._v(" "),a("h3",{attrs:{id:"_2-使用验证库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用验证库"}},[t._v("#")]),t._v(" 2. 使用验证库")]),t._v(" "),a("p",[t._v("对于常用的验证任务，我们可以使用第三方库，例如 "),a("a",{attrs:{href:"https://www.npmjs.com/package/validator",target:"_blank",rel:"noopener noreferrer"}},[t._v("validator.js"),a("OutboundLink")],1),t._v(" 或 "),a("a",{attrs:{href:"https://www.npmjs.com/package/express-validator",target:"_blank",rel:"noopener noreferrer"}},[t._v("express-validator"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("我们可以依赖这些库，因为它们的背后有一个大型社区的支持。")]),t._v(" "),a("h3",{attrs:{id:"_3-使用-regex-分析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-regex-分析器"}},[t._v("#")]),t._v(" 3. 使用 RegEx 分析器")]),t._v(" "),a("p",[t._v("你能通过使用 "),a("a",{attrs:{href:"https://www.npmjs.com/package/safe-regex",target:"_blank",rel:"noopener noreferrer"}},[t._v("safe-regex"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://www.cs.bham.ac.uk/~hxt/research/rxxr2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("rxxr2"),a("OutboundLink")],1),t._v(" 等工具来编写无漏洞的 RegEx。它们将检查你的 RegEx 是否存在漏洞并返回其合法性。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" safe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"safe-regex"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(g|i+)+t")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("safe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("这将被判定为 "),a("code",[t._v("false")]),t._v("，因为这个正则表达式容易受到灾难性回溯的影响。")]),t._v(" "),a("h3",{attrs:{id:"_4-避免使用-node-js-默认的-regex-引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-避免使用-node-js-默认的-regex-引擎"}},[t._v("#")]),t._v(" 4. 避免使用 Node.js 默认的 RegEx 引擎")]),t._v(" "),a("p",[t._v("由于 Node.js 默认的 RegEx 引擎容易受到 ReDoS 攻击，我们可以避免使用它，并以其他引擎作为替代，例如：Google 的 "),a("a",{attrs:{href:"https://www.npmjs.com/package/re2",target:"_blank",rel:"noopener noreferrer"}},[t._v("re2"),a("OutboundLink")],1),t._v(" 引擎。它确保 RegEx 可以安全地抵御 ReDoS 攻击，用法也与 Node.js 默认的 RegEx 引擎相似。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"re2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RE2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(g|i+)+t")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"giiiiiiiiiiiiiiiiiiit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),a("h2",{attrs:{id:"主要收获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要收获"}},[t._v("#")]),t._v(" 主要收获")]),t._v(" "),a("p",[t._v("灾难性回溯是正则表达式中最常见的问题。它不仅影响应用程序的性能，也向 ReDoS 攻击者敞开大门，导致 Node.js 服务器被攻击。")]),t._v(" "),a("p",[t._v("在这篇文章中，我们讨论了灾难性回溯和 ReDoS 的原理，以及规避这些问题的方法。")]),t._v(" "),a("p",[t._v("我希望这篇文章能帮助你保护你的应用程序免受此类攻击。别忘了在留言区分享你的看法。")]),t._v(" "),a("p",[t._v("感谢您的阅读！")]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("原文地址："),a("a",{attrs:{href:"https://blog.bitsrc.io/threats-of-using-regular-expressions-in-javascript-28ddccf5224c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Threats of Using Regular Expressions in JavaScript"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("原文作者："),a("a",{attrs:{href:"https://medium.com/@dulanka",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dulanka Karunasena"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("译文出自："),a("a",{attrs:{href:"https://github.com/xitu/gold-miner",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金翻译计划"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("本文永久链接："),a("a",{attrs:{href:"https://github.com/xitu/gold-miner/blob/master/article/2021/threats-of-using-regular-expressions-in-javascript.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/xitu/gold-miner/blob/master/article/2021/threats-of-using-regular-expressions-in-javascript.md"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("译者："),a("a",{attrs:{href:"https://github.com/jaredliw",target:"_blank",rel:"noopener noreferrer"}},[t._v("jaredliw"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("校对者："),a("a",{attrs:{href:"https://github.com/KimYangOfCat",target:"_blank",rel:"noopener noreferrer"}},[t._v("KimYangOfCat"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/greycodee",target:"_blank",rel:"noopener noreferrer"}},[t._v("greycodee"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);