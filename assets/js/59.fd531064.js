(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{680:function(t,v,r){"use strict";r.r(v);var e=r(6),_=Object(e.a)({},(function(){var t=this,v=t.$createElement,r=t._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[r("img",{attrs:{src:"https://picbed.kimyang.cn/202109050840752.png",alt:""}})]),t._v(" "),r("p",[t._v("作为 JavaScript 开发人员，我们通常不需要亲自与编译器打交道。但知晓 JavaScript 引擎的基础知识，以及了解它是如何处理我们各自不同的 JS 代码并将其转化为机器能理解的东西，也是很好的！🥳")]),t._v(" "),r("blockquote",[r("p",[r("strong",[t._v("注意：")]),t._v(" 这篇文章主要基于 Node.js 和以 Chromium 为基础的浏览器使用的 V8 引擎。")])]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("HTML 解析器在你的代码中寻找 "),r("code",[t._v("script")]),t._v(" 标签以及其对应的来源，并从其来源加载程序或代码。它可能来自 "),r("strong",[t._v("网络")]),t._v("，"),r("strong",[t._v("临时存储")]),t._v("，或者其它"),r("strong",[t._v("service worker")]),t._v("。然后以"),r("strong",[t._v("字节流")]),t._v("的格式响应，稍后该字节流将被字节流解码器接管！主要是"),r("strong",[t._v("字节流解码器")]),t._v("会解码到来的流数据。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://picbed.kimyang.cn/202109050840815.gif",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("字节流解码器根据已解码的的字节流创建 token。比如，"),r("code",[t._v("0066")]),t._v(" 解码为 "),r("code",[t._v("f")]),t._v("，"),r("code",[t._v("0075")]),t._v(" 变"),r("code",[t._v("u")]),t._v("，"),r("code",[t._v("006e")]),t._v(" 变 "),r("code",[t._v("n")]),t._v("，"),r("code",[t._v("0063")]),t._v(" 变 "),r("code",[t._v("c")]),t._v("，"),r("code",[t._v("0074")]),t._v(" 变 "),r("code",[t._v("t")]),t._v("，"),r("code",[t._v("0069")]),t._v(" 变 "),r("code",[t._v("i")]),t._v("，"),r("code",[t._v("006f")]),t._v(" 变 "),r("code",[t._v("o")]),t._v("，006e"),r("code",[t._v("变为")]),t._v("n` 和一个空格。看上去好像是你写了 function！这在 JavaScript 中是一个保留关键字，一个 token 被创建并发送给解析器（以及预解析器，这并没有涵盖在动图里但稍后会解释）。其余字节流的处理也一样。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://picbed.kimyang.cn/202109050841540.gif",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("引擎使用两个解析器：预解析器（pre-parser）和解析器（parser）。为了减少网站加载花费的时间，引擎会尽量避免去解析不会被立即使用的代码。预解析器处理可能稍后会用到的代码，而解析器处理马上需要使用的代码。如果一个函数只会在用户点击按钮后被调用，那么没有必要一定要在网站加载时编译它。如果最终用户点击了按钮且需要这段代码，那么它会被发送给解析器。")]),t._v(" "),r("p",[t._v("解析器根据从字节流解码器处接收的 token 来创建节点，并用这些节点来创建一个抽象语法树（AST）。🌳")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://picbed.kimyang.cn/202109050841290.gif",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("下一步，解释器出场！解释器遍历 AST 并根据 AST 所包含的信息来生成字节码。一旦字节码生成完毕，AST 就会被删除从而清空内存空间。最后，我们就拥有了机器可以使用的东西。🎉")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://picbed.kimyang.cn/202109050841747.gif",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("尽管字节码很快，但它还可以更快。字节码运行时会生成一些信息。它可以检测到某些行为是否经常发生以及被使用的数据类型。可能某个函数你调用了几十次，那么是时候做优化了，使其运行速度更快。🏃🏽‍♀️")]),t._v(" "),r("p",[t._v("字节码以及产生的类型反馈会一起发送给优化编译器。优化编译器接收字节码和类型反馈，并从中生成高度优化后的机器码。🚀")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://picbed.kimyang.cn/202109050841326.gif",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("JavaScript 是动态类型的语言，这代表数据类型可以不断改变。如果 JavaScript 引擎每次都需要检查某个值的数据类型，这会导致其运行速度非常缓慢。")]),t._v(" "),r("p",[t._v("为了减少代码解释的时间，优化后的机器码只处理引擎在运行字节码时之前见过的情况。如果我们重复使用某段代码，该代码一遍又一遍的返回相同的数据类型，那么为了加快运行速度，就可以简单的再次使用优化后的机器码。然而，JavaScript 是动态类型，相同的代码可能会突然返回一个不同的数据类型。如果发生了这种情况，机器码性能会退化，引擎会退回到解释已产生的字节码的步骤。")]),t._v(" "),r("p",[t._v("如果某块代码被调用 100 次，而且到目前为止返回相同的值。那么引擎会假设，当你第 101 次调用的时候依然返回该值。")]),t._v(" "),r("p",[t._v("比如说我们有一个如下所示的求和函数，目前为止该函数每一次调用都会带有数字类型的参数。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://picbed.kimyang.cn/202109050841848.png",alt:""}})]),t._v(" "),r("p",[t._v("该函数会返回数字 3！当我们再次调用时，引擎会假定我们依然携带两个数字类型的参数。")]),t._v(" "),r("p",[t._v("如果这是真的，那么就不需要动态检查，引擎可以再次使用优化后的机器码。反之，如果该假设不正确，那么引擎会退回到使用原来的字节码而不是优化的机器码。")]),t._v(" "),r("p",[t._v("比如下一次调用它时我们传递的是字符串而不是数字。因为 JavaScript 是动态类型语言，我们可以这样做而且不会引发报错。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://picbed.kimyang.cn/202109050841566.png",alt:""}})]),t._v(" "),r("p",[t._v("这意味着数字 "),r("code",[t._v("2")]),t._v(" 将会强制转为字符串，而该函数将会返回字符串 "),r("code",[t._v('"12"')]),t._v("。引擎将回退去解释字节码以及更新类型反馈。")]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("我希望这篇文章对你有帮助！😊 当然，还有很多有关引擎的知识点在这篇文章内我没有介绍（JS 堆，调用栈等等），这些我可能稍后会涵盖。如果你对 Javascript 内部运作感兴趣，我非常鼓励开始自己做一些研究，V8 是开源的，而且有一些很棒的文档是关于它如何在后台工作的。🤖")]),t._v(" "),r("p",[t._v("感谢阅读，祝你有美好的一天！❤")]),t._v(" "),r("hr"),t._v(" "),r("ul",[r("li",[t._v("原文地址："),r("a",{attrs:{href:"https://javascript.plainenglish.io/javascript-visualized-the-javascript-engine-1e3fc5d5310d",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Visualized: The JavaScript Engine"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("原文作者："),r("a",{attrs:{href:"https://medium.com/@harsh-patel",target:"_blank",rel:"noopener noreferrer"}},[t._v("Harsh Patel"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("译文出自："),r("a",{attrs:{href:"https://github.com/xitu/gold-miner",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金翻译计划"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("本文永久链接："),r("a",{attrs:{href:"https://github.com/xitu/gold-miner/blob/master/article/2021/javascript-visualized-the-javascript-engine.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/xitu/gold-miner/blob/master/article/2021/javascript-visualized-the-javascript-engine.md"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("译者："),r("a",{attrs:{href:"https://github.com/Tong-H",target:"_blank",rel:"noopener noreferrer"}},[t._v("没事儿"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("校对者："),r("a",{attrs:{href:"https://github.com/KimYangOfCat",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kim Yang"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://github.com/Usualminds",target:"_blank",rel:"noopener noreferrer"}},[t._v("Usualminds"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=_.exports}}]);