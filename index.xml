<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kim`s Blog on Kim`s Blog</title>
    <link>https://KimYangOfCat.github.io/</link>
    <description>Recent content in Kim`s Blog on Kim`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 01 Aug 2019 23:23:09 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>为什么你值得入手一个 Macbook？</title>
      <link>https://KimYangOfCat.github.io/2019/2019-08-01-macbookpro/</link>
      <pubDate>Thu, 01 Aug 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-08-01-macbookpro/</guid>
      <description>

&lt;p&gt;在开始看正文之前，首先明确 Macbook 适合的人群：学生、白领、文字工作者等需要高生产力工具的人群。如果你本身是一个游戏爱好者，PC 对你来说最大的应用场景就是游戏，那么你也许有更好的选择！&lt;/p&gt;

&lt;p&gt;此文写给即将步入大学学习软件魔法的学弟学妹～&lt;/p&gt;

&lt;p&gt;首先我们需要先来了解一下什么是 Apple 生态圈，简单的来说 Apple 生态圈就是以其旗下的电子产品为入门，然后再以软件系统为主打，最后以服务和理念让用户流连忘返的一个体系。Apple 对创新创意具有高度的认同感，并将之赋予进自己的科技产品中，使产品的理念得以贯彻和延续，借以吸引和打动那些尊重、热爱创新、创意的一小群人，借助他们的影响力推广自己的产品，通过自己产品构建的网络同时反哺创新和创意者，最终形成了良性的软硬件生态，Mac、iPad、iWatch、Airpods、Apple pencil、HomePod、HomeKit、iCloud等各种产品和服务的无缝组合，使用户拥有一种来去自如，行云流水般的感受。&lt;/p&gt;

&lt;p&gt;作为一个半路出道的果粉，接下来主要从多个方面来解析为什么你值得入手一个 Macbook？&lt;/p&gt;

&lt;h2 id=&#34;外观&#34;&gt;外观&lt;/h2&gt;

&lt;p&gt;在产品外观设计方面，Apple 一直是处于引领潮流的地位。最为明显的就是曾经使得安卓厂商们争相效仿的刘海屏。一直以来，我都认为 Macbook 不仅仅只是一个生产力工具；从外观上看，我认为它更像是一个艺术品；能与之比肩的 Windows PC，目前我没有接触到.直接上图感受一下吧～&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809024955.png&#34; alt=&#34;Macbook Pro&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809152009.png&#34; alt=&#34;Macbook Pro&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;操作系统&#34;&gt;操作系统&lt;/h2&gt;

&lt;p&gt;Macbook 上最大的特色就是 Apple 公司特有的 MacOS 操作系统，也是目前主流的三大操作系统（Windows、MacOS、Linux）之一。前面也说了，我是一个半路出道的果粉，那么我使用 Windows 的时间也是有一年多。那么接下来主要由以下几方面进行对比：&lt;/p&gt;

&lt;h3 id=&#34;交互设计&#34;&gt;交互设计&lt;/h3&gt;

&lt;p&gt;交互设计，可以说又是 Apple 公司的一大优势。其中最值得一提的就是触控板：相信许多使用 Windows PC 的朋友外出时免不了随身携带一个鼠标，但是使用 Macbook，你绝不会想要带一个鼠标，因为支持多种手势的触控板可比鼠标好用多了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809163936.gif&#34; alt=&#34;手势&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809164547.gif&#34; alt=&#34;手势&#34; /&gt;&lt;/p&gt;

&lt;p&gt;交互方面影响大的便是屏幕的显示效果了，Macbook 的 Retina 屏的显示效果真强过许多的 Windows PC。它采用高亮度 LED 背光、高对比度，因此呈现出来的黑色特别深邃，白色格外明亮。它支持 P3 广色域显示，绿色和红色的显示效果比使用 sRGB 色域时更加鲜艳生动。每一款 MacBook Pro 都加入了原彩显示技术，能根据环境光的色温来自动调节白平衡，带给你更自然的观感。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809160225.png&#34; alt=&#34;显示效果&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;资源管理&#34;&gt;资源管理&lt;/h3&gt;

&lt;p&gt;Windows 有一个很奇妙的现象——使用时间长以后，C盘莫名奇妙就满了，然后系统就会各种卡顿或者删掉一些应用的重要文件。这是因为 Windows 系统会将硬盘空间分区(C 盘、D 盘等等)，而 Windows 系统默认安装在 大小固定的C 盘，而 Windows 上的应用软件也是默认安装在 C 盘中的，这就造成了“磁盘有空间，但系统运行卡顿”的现象，其根本原因便是作为系统盘的 C 盘被塞满了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809165709.jpeg&#34; alt=&#34;C 盘被塞满了&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而在 MacOS 上就没有分区的概念，系统及其应用软件均直接使用整块磁盘。当 Macbook 运行卡顿、磁盘空间消耗殆尽时，就真的证明你应该升级硬盘大小了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809165937.png&#34; alt=&#34;MacOS 不分区&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Windows 上的分区概念的弊端除上述之外，还是系统垃圾不断产生的潜在原因。试想当你在安装应用时注意了将其安装在 D 盘，但是其有一部分系统文件还是会出现在 C 盘，而且在删除它的时候，你会发现总有一些文件残留在 C 盘，日积月累，他们就成为了系统垃圾。不仅无用，还占用系统空间，造成系统运行卡顿。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809170356.png&#34; alt=&#34;清理垃圾&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但是在 MacOS 中所有应用均以 &lt;code&gt;APP&lt;/code&gt; 形式打包，删除时很少留下垃圾，这也是为什么 Windows 必备一个垃圾清理应用，而 MacOS 却几乎很少需要垃圾清理应用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809171107.png&#34; alt=&#34;MacOS APP&#34; /&gt;&lt;/p&gt;

&lt;p&gt;综上，使用 Windows 比使用 MacOS 需要更好的系统资源管理的能力。&lt;/p&gt;

&lt;h3 id=&#34;适配&#34;&gt;适配&lt;/h3&gt;

&lt;p&gt;对于工作中需要用 Windows 的用户(例如：嵌入式开发者)，Apple 也对 Windows 做了适配。可以使用 Boot Camp 轻松安装 Windows，使用双系统。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809180726.png&#34; alt=&#34; Boot Camp &#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;硬件&#34;&gt;硬件&lt;/h2&gt;

&lt;p&gt;硬件可以说一直是 Macbook 的硬伤，因为 Apple 的 PC 产品硬件通常都是落后于硬件市场的潮流的。这是因为 Apple 不同于普通的 Windows PC 的组合厂商直接将零件厂商提供的零件进行组装而产出一个 PC 产品。&lt;/p&gt;

&lt;p&gt;Apple 为了使新一代硬件更加适合 MacOS 系统和 它出品的系列 PC 产品，在升级新一代零件之前，会对其进行魔改适配。正是这一魔改的过程，拖后了 Apple 硬件更新的速度。而这也是 MacOS 系统无法直接安装在非Apple 出品的 PC 上的根本原因。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809172619.jpeg&#34; alt=&#34;Macbook 拆机&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而硬件也间接导致了另一个问题，许多人都认为 Apple 的 PC 产品性价比低于 Windows PC，但是Windows PC 普遍存在一个问题就是硬件性能和软件质量的不匹配。而这便是 Macbook 的用户体验远高于 Windows PC的原因。其实硬件配置只能代表一台PC的性能顶峰，而我们日常使用的软件——办公系列：WPS 、Office 全家桶；平面设计：PS；视频创作：Pr、Ae等所需求的性能不论是 Macbook 还是 Windows PC。既然基本的性能需求都能满足，那么用户体验就取决于软件质量，而这便是 Macbook 取胜 Windows PC 的根本原因。这就如同 iPhone 相比于安卓机一样，iPhone 的硬件从表面上看是略低于安卓，但用户体验感和系统流畅度却是远高于安卓机的。&lt;/p&gt;

&lt;p&gt;对于编程学习入门的新手来说，Macbook Pro 系列的性能基本已经足够。而且当 Macbook 的性能在视频创作方面遇到瓶颈时，也有外接显卡等不错的解决方案。&lt;/p&gt;

&lt;h2 id=&#34;选购&#34;&gt;选购&lt;/h2&gt;

&lt;p&gt;那么说到这里，你是不是已经心动了？但 Apple 给出的选购方案，也是让人又爱又恨的，毕竟钱包不允许。此处不给出太过详细的选购，毕竟 Apple 每一年的产品线均在更新，但仍有以下几点值得注意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;编程入门首选 Macbook Pro 系列&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pro 系列是 Macbook 中性能最强的产品线，但这并不是非选它不可的理由。主要还是它的四个雷雳 3 接口十分强大，可扩展性远远强于 Air 系列。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809173526.png&#34; alt=&#34;雷雳 3 &#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;雷雳 3 不但拥有超高的带宽，还兼具 USB-C 行业标准的高度多用性，从而打造出一个超高速通用端口。区区一个接口，就将数据传输、充电和视频输出功能集于一身，数据吞吐最高可达 40Gb/s，带宽高达雷雳 2 的两倍。两种尺寸的 MacBook Pro 均提供配备多达四个端口的机型，机身左右两边都可以很方便地使用这些功能。只需一根连接线缆或转换器，即可轻松连接上现有的设备。另外，雷雳 3 的双面可用设计，也让你在接入时无需考虑正反面问题。&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;电脑硬盘空间至少上到 256GB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学习软件魔法的大学生可能做的最多的事情就是安装 IDE (编程软件)，每一学期都会用到多种 IDE，多装几个就可能出现硬盘空间不够用的情况！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809175143.jpeg&#34; alt=&#34;内存告急&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对视频创作有兴趣的同学考虑上独显&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前 13 寸的 Macbook Pro 都是集显，即集成显卡，对于视频创作这类十分消耗显卡性能的工作，建议加上独显。而只有 15 寸的 Macbook Pro 才有独显哟～&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809180130.png&#34; alt=&#34;集显&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809175942.png&#34; alt=&#34;独显&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mac与windows之间的权衡&#34;&gt;Mac与Windows之间的权衡&lt;/h2&gt;

&lt;p&gt;最后从客观上来说，每个人的电脑都有着不同的使用场景，对于轻度办公，修图片剪视频，编辑文章，敲代码，做设计等来说，macOS可能比windows更适合你。无论是开发环境的配置，软件的安装卸载，键盘的快捷化操作，都比windows方便很多。不被弹窗打扰，不用担心病毒、不需要系统优化、甚至可以不用清理垃圾，这些都使你可以转注于使用电脑做事，而不是在&amp;rdquo;使用&amp;rdquo;这件事儿本身上浪费时间。就是说，macOS可以使你更&amp;rdquo;专注&amp;rdquo;。但Mac也有着一些自身局限性，譬如说游戏行业的3dsmax、建筑行业的国产CAD软件、金融财务专业的金蝶和用友，还有微软的办公软件等等。这些软件有的可以安装在虚拟机上，但由于性能的限制，体验并不如windows电脑上好。当然也不是没有解决的办法，但如果你对Windows擅长的部分更加依赖，那么你就要慎重考虑，不能盲从，毕竟与Mac近似价位的Windows笔记本同样有着足够强大的性能。萝卜白菜，各有所爱，选择你喜欢且适合你的就好。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;至此，本文结束啦！&lt;/p&gt;

&lt;p&gt;如果你对 iOS Club 感兴趣，&lt;/p&gt;

&lt;p&gt;如果你想和我们一起做一些不一样的事儿，&lt;/p&gt;

&lt;p&gt;欢迎加入招新群～&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/MacbookPro/20190809181644.jpg&#34; alt=&#34;招新啦！&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MVC</title>
      <link>https://KimYangOfCat.github.io/2019/2019-06-07-swiftlearning2/</link>
      <pubDate>Fri, 07 Jun 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-06-07-swiftlearning2/</guid>
      <description>&lt;p&gt;这是学习swift的笔记系列，学习的课程是&lt;a href=&#34;https://www.bilibili.com/medialist/play/ml148451180&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;斯坦福  iOS11 swift语言&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;学习swift的笔记(一)：&lt;a href=&#34;https://kimyang.cn/2019/2019-06-01-swiftlearning1/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;introduction to iOS11, Xcode 9 and Swift 4&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今天学习的是课程的第二集：&lt;a href=&#34;https://www.bilibili.com/video/av16339375/?p=2&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;MVC&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这一节主要讲的就是MVC(Model View Controller)开发模式,这种开发模式主要包含以下三部分：
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/p5.png&#34; alt=&#34;Three Maps&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Model 中包含程序的规则，知道程序能做什么，但不知道如何显示给用户看。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190607220048.png&#34; alt=&#34;model&#34; /&gt;&lt;/p&gt;

&lt;p&gt;那么如何将 odel 做的事情显示给用户看就是 Controlller 的职责了。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609133259.png&#34; alt=&#34;Controller&#34; /&gt;&lt;/p&gt;

&lt;p&gt;View 是 Controller 的下属，它们是通用的 UI 组件。可以简单理解成View 是 Controller 显示 Model 所做的结果的容器或工具。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609141156.png&#34; alt=&#34;View&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在了解了 MVC 的三部分是什么之后，我们最需要了解的就是这三者之间是怎样进行通讯的，以便我们去了解整个 MVC 的工作过程。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Controllers can always talk directly to their model
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609142317.png&#34; alt=&#34;控制器可以直接访问模型&#34; /&gt;
控制器可以直接访问模型是必须的，因为它的工作就是和模型沟通：“需要我(Controller)帮你(Medol)显示什么样的结果吗？“&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Controllers can also talk directly to their View
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609143208.png&#34; alt=&#34;控制器也可以直接访问视图&#34; /&gt;
因为之前说过 View 是 Controller 的下属，所以能够直接访问也是理所当然的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Model and View should never speak to each other
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609143722.png&#34; alt=&#34;模型与视图不可互通&#34; /&gt;
试想如果模型与试图可以互通，那还有控制器的事儿吗？从专业的角度来解释，有两个原因：其一，模型与 UI 无关， 而视图只负责显示 UI ， 你看它俩都没有共同话题，这能沟通吗？其二，视图都是通用的，通用的 UI 组件如何能知道特定的APP能做些什么事情尼？所以，模型与视图是不可以互相沟通的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Can the View speak to its Controller?
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609145119.png&#34; alt=&#34;视图能否通知控制器呢？&#34; /&gt;
那么视图能否通知控制器呢？这个问题的答案是肯定的。从某些时候来说这是必须的，比如”按钮被按下“的时候，他们必须得交流，而且这种交流必须得是某种标准化的匿名通讯机制。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609145939.png&#34; alt=&#34;标准化的匿名通讯&#34; /&gt;
那为什么得是匿名的呢？因为视图(View)是通用的对象呀。当 View 通知 Controller 时，它不应该知道这个按钮是做甚什么的，它知道的应该是这只是一个按钮。它通知给控制器的不应该是：“发送按钮被按下了！”，而是：“这里有个按钮被按下了！”，所以为了保证 View 的通用性，View 和  Controller之间的通讯只能是标准化的匿名机制。那如何实现这样的标准化匿名机制呢？有一种名叫 Target-Action 的匿名通讯机制，其原理如下：
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609144836.png&#34; alt=&#34;控制器中设立一个 Target&#34; /&gt;
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609151058.png&#34; alt=&#34;视图中设立一种 Action&#34; /&gt;
可以简单理解成，控制器中有一个名为 target 的方法，视图中有一个名为 action 的方法，每当有一个按钮按下，按钮就会获得 action 方法，然后通过它向 target 发送某个按钮被按下的具体信息，然后由 target 方法去通知控制器。这样理解起来是不是很简单？这本身就是一种很简单的匿名通讯机制。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609152110.png&#34; alt=&#34;target-action&#34; /&gt;
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609152740.png&#34; alt=&#34;更复杂的通讯怎么办？&#34; /&gt;
但是有时候 View 需要给 Controller 通知更复杂的信息时候，比如，一个可以滚动上下的视窗，那么上边简单通讯可能就不能胜任了。因为滚动视窗总是要问控制器很多问题，例如：我滚到到底部了，我还能往下边滚动吗？我横着滚动还是竖着滚动？这些问题的开头大多时候也是如图中所示的should，will，did！那就需要用到更复杂的匿名通讯机制——Delegate(代理)。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609153100.png&#34; alt=&#34;Delegate&#34; /&gt;
在滚动视图里面有一个变量，这个变量存储着一个对象，这个对象能够响应一定数量的某些方法，然后控制器通过protocol协议与视图交流。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609153814.png&#34; alt=&#34;Protocol&#34; /&gt;
protocol协议，后面再进行分享。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609154321.png&#34; alt=&#34;View don&#39;t own data&#34; /&gt;
接下来再来了解另一种代理（data source），View 本身并没有任何数据，它所展示的数据必定有一个来源。那么它的来源是什么？Model？
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609154159.png&#34; alt=&#34;Data source&#34; /&gt;
通过之前的了解，我们可能会误以为 Model 是 View 的数据来源，但其实并不是这样的，View显示的数据的直接来源是 Controller，控制器通过访问模型来获取 View 需要的数据。例如一个上下翻动的列表，每当用户上翻的时候，列表就会不断地问控制器：“接下来的列表中的数据是什么呀？”，然后控制器就会去问模型：“列表接下去所需要的数据内容是什么？“，然后模型就会屁颠屁颠地去查数据库，去看接下去的数据是什么！本质上来看数据源和代理其实是类似的，他们方法的不同取决于不同的 UI 组件。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609164337.png&#34; alt=&#34;控制器的作用&#34; /&gt;
接下来我们说说控制器的作用吧！通过对 View 与 Conller 交流过程的了解，我们也能感受到了控制器的关键！总结一下，控制器的作用就是将模型的信息转化为某种格式，然后提供给视图，这就是它的主要的作用；同理反向的它也要处理，把视图中的用户交互翻译成模型中的数据。它负责来回的通讯，是所有交流的中心！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Can the Model talk directly to the Controller？
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609164916.png&#34; alt=&#34;模型能直接通知控制器吗？&#34; /&gt;
能通知，但是肯定不是直接的。因为模型与 UI 无关，而控制器从根本上讲是取决于 UI 的，所以不能直接沟通。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609165252.png&#34; alt=&#34;NO&#34; /&gt;
但是有一种方法，让模型能在数据发生改变时给控制器发出通知，好让与之有关的 UI 及时更新数据。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609165626.png&#34; alt=&#34;Radio Station&#34; /&gt;
这种方法被称作电台模式。模型在某个已知的电台上开始广播，而控制器就会收听这个电台，当听到模型电台说数据发生改变的时候，控制器就主动去问模型发生了什么改变，以此来获取改变的主要内容。
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609165934.png&#34; alt=&#34;KVO&#34; /&gt;
这种模式在 iOS  被叫做通知(notification)或者键值监听(KVO,Key Value Observing)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们了解了一个单一的 MVC 的工作过程，但我们手机中的 APP 肯定不止一个 View，那么多个MVC是如何工作在一起的呢？
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609170830.png&#34; alt=&#34;MVCs&#34; /&gt;
上图是正确的MVC组织状态，而非下图中全是绿色的通道！
&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/20190609171255.png&#34; alt=&#34;NOT MVCs&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to iOS11, Xcode 9 and Swift 4</title>
      <link>https://KimYangOfCat.github.io/2019/2019-06-01-swiftlearning1/</link>
      <pubDate>Sat, 01 Jun 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-06-01-swiftlearning1/</guid>
      <description>

&lt;p&gt;这是学习swift的笔记系列，学习的课程是&lt;a href=&#34;https://www.bilibili.com/medialist/play/ml148451180&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;斯坦福  iOS11 swift语言&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;今天学习的是课程的第一集：&lt;a href=&#34;https://www.bilibili.com/video/av16339375/?p=1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;introduction to iOS11, Xcode 9 and Swift 4&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;what-s-in-ios&#34;&gt;What&amp;rsquo;s in iOS ?&lt;/h4&gt;

&lt;p&gt;我们可以将 iOS 分为 Core OS、Core Services、Media 和 Cocoa Touch 四层，最前面一层最接近硬件，最后面一层最接近用户。下面详细解释每一层的作用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core OS：iOS 系统其实是 Unix 系统，它是BSD版本的Unix，在其中运行的程序大多都是C语言写的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/p1.png&#34; alt=&#34;Core OS&#34; /&gt;
其中 OSX Kernel 指的是苹果美国苹果公司(Apple .Inc)于 WWDC 2013 公布的 OS X 操作系统，名称Mavericks；Mach 3.0 指的是一个由卡内基梅隆大学开发的用于支持操作系统研究的操作系统内核；BSD 指的是伯克利软件套件(Berkeley Software Distribution)是 Unix 的衍生系统，1970 年代由加州大学伯克利分校开创，其特点是稳定和安全。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core Services：是对 Core OS 层面向对象的封装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/p2.png&#34; alt=&#34;Core Services&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Media: 媒体处理层&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/p3.png&#34; alt=&#34;Media&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cocoa Touch：负责用户界面UI交互&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-img-1256389522.cos.ap-beijing.myqcloud.com/SwiftLearning/ppng.png&#34; alt=&#34;Cocoa Touch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以第一节课的重点部分就只有这么一点点儿了，当然每张图里面还有许多的内容值得去挖掘。然后后面就是实际的代码演示啦！跟着做就好！冲冲冲！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CPU analysis and Software design summary</title>
      <link>https://KimYangOfCat.github.io/2019/2019-05-31-cpu-en/</link>
      <pubDate>Fri, 31 May 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-05-31-cpu-en/</guid>
      <description>

&lt;p&gt;Click &lt;a href=&#34;https://cdn.coden.hk/c422/weekly-keynote/2019-5-31-yangjin/5.30工作室分享会.pdf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt; and see details.&lt;/p&gt;

&lt;h2 id=&#34;point-out-an-error&#34;&gt;Point out an error&lt;/h2&gt;

&lt;p&gt;For the question that &lt;strong&gt;&amp;ldquo;Why is Thread instead of Process in ‘4 Core 8 Thread&amp;rsquo; ?”&lt;/strong&gt; in PDF&lt;/p&gt;

&lt;p&gt;Firstly，a point should be clearly，which is that &lt;strong&gt;Thread in &amp;lsquo;4 Core 8 Thread&amp;rsquo; is different with Thread in operating system&lt;/strong&gt;.The former refers to the &lt;strong&gt;physical unit&lt;/strong&gt; in the CPU, the latter refers to the &lt;strong&gt;logical unit&lt;/strong&gt; in the operating system, so the problem does not hold!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CPU 简析以及软件设计总结</title>
      <link>https://KimYangOfCat.github.io/2019/2019-05-31-cpu/</link>
      <pubDate>Fri, 31 May 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-05-31-cpu/</guid>
      <description>

&lt;p&gt;点击&lt;a href=&#34;https://cdn.coden.hk/c422/weekly-keynote/2019-5-31-yangjin/5.30工作室分享会.pdf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;查看详情&lt;/p&gt;

&lt;h2 id=&#34;指出一个错误&#34;&gt;指出一个错误&lt;/h2&gt;

&lt;p&gt;针对PDF中提出的 &lt;strong&gt;“为什么‘4核8线程’中用的是线程而非进程？”&lt;/strong&gt; 问题&lt;/p&gt;

&lt;p&gt;首先明确一个点，&lt;strong&gt;‘4核8线程’中的线程与我们设计软件时遇到的线程并不是同一个概念！&lt;/strong&gt;前者指的是CPU中的&lt;strong&gt;物理单元&lt;/strong&gt;，后者指的是操作系统中的&lt;strong&gt;逻辑单元&lt;/strong&gt;，所以这个问题本身并不成立！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://KimYangOfCat.github.io/about/</link>
      <pubDate>Fri, 31 May 2019 21:22:39 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;我是谁&#34;&gt;我是谁&lt;/h2&gt;

&lt;p&gt;我是 Kim Yang，一个爱仰望星空的人。&lt;/p&gt;

&lt;h2 id=&#34;我了解的&#34;&gt;我了解的&lt;/h2&gt;

&lt;h3 id=&#34;编程语言&#34;&gt;编程语言&lt;/h3&gt;

&lt;p&gt;目前位置了解并且使用过的语言有 C++、Python 和 Swift；&lt;/p&gt;

&lt;h4 id=&#34;c&#34;&gt;C++&lt;/h4&gt;

&lt;p&gt;对于这门语言，只能说极其复杂，在我目前的项目经历中，并没有实际应用到这门语言，但这门语言有许多的精华值得去研究，待他日有所心得再来填此坑。&lt;/p&gt;

&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;

&lt;p&gt;目前 Python 这门语言可谓是大火，因其强大的第三方库，使其在AI、ML、爬虫、数据分析和 Web 后端等多个领域都有不错的应用，但个人认为学习入门需要谨慎。个人认为 Python 并不适合作为主要语言学习，毕竟它的应用领域处于两级分化的状态，AI、ML 等领域需要深厚的数学功底，而爬虫的应用从社会层面又是比较复杂的，且其在 Web 后端的性能又不足以比肩 Java 等语言。&lt;/p&gt;

&lt;p&gt;在实际项目经历中，曾使用 Python 写过简单的文本分类模型和 Web 后端。由此简单入门自然语言处理 (NLP)、图像模式识别、语音情感识别等多个深度学习领域，并对 Kreas、 Tensorflow 等常见深度的学习模型库有了初步了解和应用。&lt;/p&gt;

&lt;h4 id=&#34;swift&#34;&gt;Swift&lt;/h4&gt;

&lt;p&gt;据 Apple 官方宣传：“Swift 是最适合新手入门的一编程语言！”虽然目前位置我还没有真是体验这话中之意，但从今后的编程语言向声明式语言的趋势来看，Swift 还是值得学习的。&lt;/p&gt;

&lt;p&gt;目前正处于入门学习阶段，用 Swift 写一款 APP 上架是目前正在努力的方向！&lt;/p&gt;

&lt;h3 id=&#34;操作系统&#34;&gt;操作系统&lt;/h3&gt;

&lt;p&gt;对于目前主流的三大操作系统：Windows、MacOS 和 Linux，均有过了解和使用；从 Windows 入门，但目前日常开发使用 MacOS，生产部署使用 Linux，且偏爱   Ubuntu。&lt;/p&gt;

&lt;h3 id=&#34;美工影创&#34;&gt;美工影创&lt;/h3&gt;

&lt;p&gt;对于美工设计和影视创作，由于参与竞赛，故对这方面有所粗浅了解。日常使用工具从 Axure、Ps、Pr 和 Ae 到 Sketch 和 Apple三件套（FCP、Motion、iMovie）等。&lt;/p&gt;

&lt;h3 id=&#34;科研方向&#34;&gt;科研方向&lt;/h3&gt;

&lt;p&gt;目前的选择的研究方向是计算机网络，尚在入门阶段，哪敢说话！&lt;/p&gt;

&lt;h2 id=&#34;联系我&#34;&gt;联系我&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;微博：&lt;a href=&#34;https://weibo.com/6373489690/profile?topnav=1&amp;amp;wvr=6&amp;amp;is_all=1&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;KimYangLikeCat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/KimYangOfCat&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;KimYangOfCat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;E-mail：kim_yang95@163.com&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>