<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kim`s Blog on Kim`s Blog</title>
    <link>https://KimYangOfCat.github.io/</link>
    <description>Recent content in Kim`s Blog on Kim`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 07 Jun 2019 23:23:09 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MVC</title>
      <link>https://KimYangOfCat.github.io/2019/2019-06-07-swiftlearning2/</link>
      <pubDate>Fri, 07 Jun 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-06-07-swiftlearning2/</guid>
      <description>&lt;p&gt;这是学习swift的笔记系列，学习的课程是&lt;a href=&#34;https://www.bilibili.com/medialist/play/ml148451180&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;斯坦福  iOS11 swift语言&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;第一集：&lt;a href=&#34;https://kimyang.cn/2019/2019-06-01-swiftlearning1/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;introduction to iOS11, Xcode 9 and Swift 4&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今天学习的是课程的第二集：&lt;strong&gt;MVC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这一节主要讲的就是MVC(Model View Controller)开发模式,这种开发模式主要包含以下三部分：
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/p5.png&#34; alt=&#34;Three Maps&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Model 中包含程序的规则，知道程序能做什么，但不知道如何显示给用户看。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190607220048.png&#34; alt=&#34;Medol&#34; /&gt;&lt;/p&gt;

&lt;p&gt;那么如何将 odel 做的事情显示给用户看就是 Controlller 的职责了。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609133259.png&#34; alt=&#34;Controller&#34; /&gt;&lt;/p&gt;

&lt;p&gt;View 是 Controller 的下属，它们是通用的 UI 组件。可以简单理解成View 是 Controller 显示 Model 所做的结果的容器或工具。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609141156.png&#34; alt=&#34;View&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在了解了 MVC 的三部分是什么之后，我们最需要了解的就是这三者之间是怎样进行通讯的，以便我们去了解整个 MVC 的工作过程。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Controllers can always talk directly to their model
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609142317.png&#34; alt=&#34;控制器可以直接访问模型&#34; /&gt;
控制器可以直接访问模型是必须的，因为它的工作就是和模型沟通：“需要我(Controller)帮你(Medol)显示什么样的结果吗？“&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Controllers can also talk directly to their View
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609143208.png&#34; alt=&#34;控制器也可以直接访问视图&#34; /&gt;
因为之前说过 View 是 Controller 的下属，所以能够直接访问也是理所当然的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Model and View should never speak to each other
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609143722.png&#34; alt=&#34;模型与视图不可互通&#34; /&gt;
试想如果模型与试图可以互通，那还有控制器的事儿吗？从专业的角度来解释，有两个原因：其一，模型与 UI 无关， 而视图只负责显示 UI ， 你看它俩都没有共同话题，这能沟通吗？其二，视图都是通用的，通用的 UI 组件如何能知道特定的APP能做些什么事情尼？所以，模型与视图是不可以互相沟通的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Can the View speak to its Controller?
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609145119.png&#34; alt=&#34;视图能否通知控制器呢？&#34; /&gt;
那么视图能否通知控制器呢？这个问题的答案是肯定的。从某些时候来说这是必须的，比如”按钮被按下“的时候，他们必须得交流，而且这种交流必须得是某种标准化的匿名通讯机制。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609145939.png&#34; alt=&#34;标准化的匿名通讯&#34; /&gt;
那为什么得是匿名的呢？因为视图(View)是通用的对象呀。当 View 通知 Controller 时，它不应该知道这个按钮是做甚什么的，它知道的应该是这只是一个按钮。它通知给控制器的不应该是：“发送按钮被按下了！”，而是：“这里有个按钮被按下了！”，所以为了保证 View 的通用性，View 和  Controller之间的通讯只能是标准化的匿名机制。那如何实现这样的标准化匿名机制呢？有一种名叫 Target-Action 的匿名通讯机制，其原理如下：
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609144836.png&#34; alt=&#34;控制器中设立一个 Target&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609151058.png&#34; alt=&#34;视图中设立一种 Action&#34; /&gt;
可以简单理解成，控制器中有一个名为 target 的方法，视图中有一个名为 action 的方法，每当有一个按钮按下，按钮就会获得 action 方法，然后通过它向 target 发送某个按钮被按下的具体信息，然后由 target 方法去通知控制器。这样理解起来是不是很简单？这本身就是一种很简单的匿名通讯机制。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609152110.png&#34; alt=&#34;target-action&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609152740.png&#34; alt=&#34;更复杂的通讯怎么办？&#34; /&gt;
但是有时候 View 需要给 Controller 通知更复杂的信息时候，比如，一个可以滚动上下的视窗，那么上边简单通讯可能就不能胜任了。因为滚动视窗总是要问控制器很多问题，例如：我滚到到底部了，我还能往下边滚动吗？我横着滚动还是竖着滚动？这些问题的开头大多时候也是如图中所示的should，will，did！那就需要用到更复杂的匿名通讯机制——Delegate(代理)。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609153100.png&#34; alt=&#34;Delegate&#34; /&gt;
在滚动视图里面有一个变量，这个变量存储着一个对象，这个对象能够响应一定数量的某些方法，然后控制器通过protocol协议与视图交流。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609153814.png&#34; alt=&#34;Protocol&#34; /&gt;
protocol协议，后面再进行分享。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609154321.png&#34; alt=&#34;View don&#39;t own data&#34; /&gt;
接下来再来了解另一种代理（data source），View 本身并没有任何数据，它所展示的数据必定有一个来源。那么它的来源是什么？Model？
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609154159.png&#34; alt=&#34;Data source&#34; /&gt;
通过之前的了解，我们可能会误以为 Model 是 View 的数据来源，但其实并不是这样的，View显示的数据的直接来源是 Controller，控制器通过访问模型来获取 View 需要的数据。例如一个上下翻动的列表，每当用户上翻的时候，列表就会不断地问控制器：“接下来的列表中的数据是什么呀？”，然后控制器就会去问模型：“列表接下去所需要的数据内容是什么？“，然后模型就会屁颠屁颠地去查数据库，去看接下去的数据是什么！本质上来看数据源和代理其实是类似的，他们方法的不同取决于不同的 UI 组件。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609164337.png&#34; alt=&#34;控制器的作用&#34; /&gt;
接下来我们说说控制器的作用吧！通过对 View 与 Conller 交流过程的了解，我们也能感受到了控制器的关键！总结一下，控制器的作用就是将模型的信息转化为某种格式，然后提供给视图，这就是它的主要的作用；同理反向的它也要处理，把视图中的用户交互翻译成模型中的数据。它负责来回的通讯，是所有交流的中心！&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Can the Model talk directly to the Controller？
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609164916.png&#34; alt=&#34;模型能直接通知控制器吗？&#34; /&gt;
能通知，但是肯定不是直接的。因为模型与 UI 无关，而控制器从根本上讲是取决于 UI 的，所以不能直接沟通。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609165252.png&#34; alt=&#34;NO&#34; /&gt;
但是有一种方法，让模型能在数据发生改变时给控制器发出通知，好让与之有关的 UI 及时更新数据。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609165626.png&#34; alt=&#34;Radio Station&#34; /&gt;
这种方法被称作电台模式。模型在某个已知的电台上开始广播，而控制器就会收听这个电台，当听到模型电台说数据发生改变的时候，控制器就主动去问模型发生了什么改变，以此来获取改变的主要内容。
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609165934.png&#34; alt=&#34;KVO&#34; /&gt;
这种模式在 iOS  被叫做通知(notification)或者键值监听(KVO,Key Value Observing)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们了解了一个单一的 MVC 的工作过程，但我们手机中的 APP 肯定不止一个 View，那么多个MVC是如何工作在一起的呢？
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609170830.png&#34; alt=&#34;MVCs&#34; /&gt;
上图是正确的MVC组织状态，而非下图中全是绿色的通道！
&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/20190609171255.png&#34; alt=&#34;NOT MVCs&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to iOS11, Xcode 9 and Swift 4</title>
      <link>https://KimYangOfCat.github.io/2019/2019-06-01-swiftlearning1/</link>
      <pubDate>Sat, 01 Jun 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-06-01-swiftlearning1/</guid>
      <description>

&lt;p&gt;这是学习swift的笔记系列，学习的课程是&lt;a href=&#34;https://www.bilibili.com/medialist/play/ml148451180&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;斯坦福  iOS11 swift语言&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;今天学习的是课程的第一集：&lt;strong&gt;introduction to iOS11, Xcode 9 and Swift 4&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;what-s-in-ios&#34;&gt;What&amp;rsquo;s in iOS ?&lt;/h4&gt;

&lt;p&gt;我们可以将 iOS 分为 Core OS、Core Services、Media 和 Cocoa Touch 四层，最前面一层最接近硬件，最后面一层最接近用户。下面详细解释每一层的作用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core OS：iOS 系统其实是 Unix 系统，它是BSD版本的Unix，在其中运行的程序大多都是C语言写的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/p1.png&#34; alt=&#34;Core OS&#34; /&gt;
其中 OSX Kernel 指的是苹果美国苹果公司(Apple .Inc)于 WWDC 2013 公布的 OS X 操作系统，名称Mavericks；Mach 3.0 指的是一个由卡内基梅隆大学开发的用于支持操作系统研究的操作系统内核；BSD 指的是伯克利软件套件(Berkeley Software Distribution)是 Unix 的衍生系统，1970 年代由加州大学伯克利分校开创，其特点是稳定和安全。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core Services：是对 Core OS 层面向对象的封装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/p2.png&#34; alt=&#34;Core Services&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Media: 媒体处理层&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/p3.png&#34; alt=&#34;Media&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cocoa Touch：负责用户界面UI交互&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KimYangOfCat/My_PicGo/master/img/SwiftLearning/ppng&#34; alt=&#34;Cocoa Touch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以第一节课的重点部分就只有这么一点点儿了，当然每张图里面还有许多的内容值得去挖掘。然后后面就是实际的代码演示啦！跟着做就好！冲冲冲！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CPU analysis and Software design summary</title>
      <link>https://KimYangOfCat.github.io/2019/2019-05-31-cpu-en/</link>
      <pubDate>Fri, 31 May 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-05-31-cpu-en/</guid>
      <description>

&lt;p&gt;Click &lt;a href=&#34;https://cdn.coden.hk/c422/weekly-keynote/2019-5-31-yangjin/5.30工作室分享会.pdf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt; and see details.&lt;/p&gt;

&lt;h2 id=&#34;point-out-an-error&#34;&gt;Point out an error&lt;/h2&gt;

&lt;p&gt;For the question that &lt;strong&gt;&amp;ldquo;Why is Thread instead of Process in ‘4 Core 8 Thread&amp;rsquo; ?”&lt;/strong&gt; in PDF&lt;/p&gt;

&lt;p&gt;Firstly，a point should be clearly，which is that &lt;strong&gt;Thread in &amp;lsquo;4 Core 8 Thread&amp;rsquo; is different with Thread in operating system&lt;/strong&gt;.The former refers to the &lt;strong&gt;physical unit&lt;/strong&gt; in the CPU, the latter refers to the &lt;strong&gt;logical unit&lt;/strong&gt; in the operating system, so the problem does not hold!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CPU 简析以及软件设计总结</title>
      <link>https://KimYangOfCat.github.io/2019/2019-05-31-cpu/</link>
      <pubDate>Fri, 31 May 2019 23:23:09 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/2019/2019-05-31-cpu/</guid>
      <description>

&lt;p&gt;点击&lt;a href=&#34;https://cdn.coden.hk/c422/weekly-keynote/2019-5-31-yangjin/5.30工作室分享会.pdf&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;查看详情&lt;/p&gt;

&lt;h2 id=&#34;指出一个错误&#34;&gt;指出一个错误&lt;/h2&gt;

&lt;p&gt;针对PDF中提出的 &lt;strong&gt;“为什么‘4核8线程’中用的是线程而非进程？”&lt;/strong&gt; 问题&lt;/p&gt;

&lt;p&gt;首先明确一个点，&lt;strong&gt;‘4核8线程’中的线程与我们设计软件时遇到的线程并不是同一个概念！&lt;/strong&gt;前者指的是CPU中的&lt;strong&gt;物理单元&lt;/strong&gt;，后者指的是操作系统中的&lt;strong&gt;逻辑单元&lt;/strong&gt;，所以这个问题本身并不成立！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://KimYangOfCat.github.io/about/</link>
      <pubDate>Fri, 31 May 2019 21:22:39 +0800</pubDate>
      
      <guid>https://KimYangOfCat.github.io/about/</guid>
      <description>

&lt;h3 id=&#34;我是谁&#34;&gt;我是谁&lt;/h3&gt;

&lt;p&gt;我是Kim Yang，一个爱仰望星空的人。我从不想留念过去，却又总是被其牵绊。&lt;/p&gt;

&lt;h3 id=&#34;我爱做啥&#34;&gt;我爱做啥&lt;/h3&gt;

&lt;p&gt;写代码不知道算不算，我觉得不算吧！不过爱瞎想是真的，敢想敢做是我给自己的标签，希望能一直这样下去！&lt;/p&gt;

&lt;h3 id=&#34;我会啥&#34;&gt;我会啥&lt;/h3&gt;

&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;

&lt;p&gt;用Python写过机器学习算法，也了解过一点儿深度学习的内容，但是还没有入门，哪敢说话&lt;/p&gt;

&lt;h4 id=&#34;前端&#34;&gt;前端&lt;/h4&gt;

&lt;p&gt;前端学了一段时间，半只脚入门吧，搞过一个微信小程序，拿了点儿小奖，就不必说了。&lt;/p&gt;

&lt;h4 id=&#34;ios-开发&#34;&gt;iOS 开发&lt;/h4&gt;

&lt;p&gt;目前正在学习iOS开发，处在小白阶段，从Swift语法学起吧。搞出一款APP并且上架到Apple store是最近的目标。&lt;/p&gt;

&lt;h4 id=&#34;科研方向&#34;&gt;科研方向&lt;/h4&gt;

&lt;p&gt;为了考个研究生吧，目前的选择的研究方向是计算机网络，也正在入门阶段吧！&lt;/p&gt;

&lt;p&gt;所以你也看出来了&lt;strong&gt;我就是哪个方向都还没有入门的小白，&lt;/strong&gt;感谢你看到这里！&lt;/p&gt;

&lt;h3 id=&#34;联系我&#34;&gt;联系我&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/KimYangOfCat&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;KimYangOfCat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;E-mail：kim_yang95@163.com&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>